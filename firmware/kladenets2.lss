
kladenets2.elf:     формат файла elf32-avr

Разделы:
Инд Имя           Размер    VMA       LMA       Файл      Вырав
  0 .data         00000042  00800100  00001304  00001398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001304  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800142  00800142  000013da  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000013da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000527f  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013a1  00000000  00000000  00006953  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000201e  00000000  00000000  00007cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007dc  00000000  00000000  00009d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fd9  00000000  00000000  0000a4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003266  00000000  00000000  0000c4c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c0  00000000  00000000  0000f72f  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизассемблирование раздела .text:

00000000 <__vectors>:
       0:	bd c0       	rjmp	.+378    	; 0x17c <__ctors_end>
       2:	00 00       	nop
       4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	d5 c0       	rjmp	.+426    	; 0x1b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	d3 c0       	rjmp	.+422    	; 0x1b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d1 c0       	rjmp	.+418    	; 0x1b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	cf c0       	rjmp	.+414    	; 0x1b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	cd c0       	rjmp	.+410    	; 0x1b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cb c0       	rjmp	.+406    	; 0x1b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c9 c0       	rjmp	.+402    	; 0x1b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	c7 c0       	rjmp	.+398    	; 0x1b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	c5 c0       	rjmp	.+394    	; 0x1b4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	38 c5       	rjmp	.+2672   	; 0xa9e <__vector_11>
      2e:	00 00       	nop
      30:	c1 c0       	rjmp	.+386    	; 0x1b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	bf c0       	rjmp	.+382    	; 0x1b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	bd c0       	rjmp	.+378    	; 0x1b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bb c0       	rjmp	.+374    	; 0x1b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b9 c0       	rjmp	.+370    	; 0x1b4 <__bad_interrupt>
      42:	00 00       	nop
      44:	b7 c0       	rjmp	.+366    	; 0x1b4 <__bad_interrupt>
      46:	00 00       	nop
      48:	b5 c0       	rjmp	.+362    	; 0x1b4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b3 c0       	rjmp	.+358    	; 0x1b4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b1 c0       	rjmp	.+354    	; 0x1b4 <__bad_interrupt>
      52:	00 00       	nop
      54:	af c0       	rjmp	.+350    	; 0x1b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	ad c0       	rjmp	.+346    	; 0x1b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ab c0       	rjmp	.+342    	; 0x1b4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a9 c0       	rjmp	.+338    	; 0x1b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	a7 c0       	rjmp	.+334    	; 0x1b4 <__bad_interrupt>
      66:	00 00       	nop
      68:	a5 c0       	rjmp	.+330    	; 0x1b4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a3 c0       	rjmp	.+326    	; 0x1b4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a1 c0       	rjmp	.+322    	; 0x1b4 <__bad_interrupt>
      72:	00 00       	nop
      74:	18 06       	cpc	r1, r24
      76:	3a 06       	cpc	r3, r26
      78:	21 07       	cpc	r18, r17
      7a:	3a 06       	cpc	r3, r26
      7c:	21 07       	cpc	r18, r17
      7e:	7f 06       	cpc	r7, r31
      80:	a1 06       	cpc	r10, r17
      82:	21 07       	cpc	r18, r17
      84:	f3 06       	cpc	r15, r19
      86:	05 07       	cpc	r16, r21

00000088 <ProductString>:
      88:	18 03 4c 00 61 00 64 00 6f 00 73 00 68 00 6b 00     ..L.a.d.o.s.h.k.
      98:	69 00 20 00 34 00 34 00 00 00                       i. .4.4...

000000a2 <ManufacturerString>:
      a2:	0e 03 69 00 62 00 6e 00 54 00 65 00 6f 00 00 00     ..i.b.n.T.e.o...

000000b2 <LanguageString>:
      b2:	04 03 09 04                                         ....

000000b6 <ConfigurationDescriptor>:
      b6:	09 02 3b 00 02 01 00 c0 32 09 04 00 00 01 03 01     ..;.....2.......
      c6:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
      d6:	00 05 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
      e6:	01 22 3a 00 07 05 83 03 08 00 05                    .":........

000000f1 <DeviceDescriptor>:
      f1:	12 01 10 01 00 00 00 08 eb 03 4d 20 01 00 01 02     ..........M ....
     101:	00 01                                               ..

00000103 <KeyboardReport>:
     103:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     113:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     123:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     133:	25 ff 05 07 19 00 29 ff 95 06 75 08 81 00 c0        %.....)...u....

00000142 <MouseReport>:
     142:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
     152:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
     162:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
     172:	01 00 95 02 75 08 81 06 c0 c0                       ....u.....

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d2 e0       	ldi	r29, 0x02	; 2
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61

00000188 <__do_copy_data>:
     188:	11 e0       	ldi	r17, 0x01	; 1
     18a:	a0 e0       	ldi	r26, 0x00	; 0
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	e4 e0       	ldi	r30, 0x04	; 4
     190:	f3 e1       	ldi	r31, 0x13	; 19
     192:	02 c0       	rjmp	.+4      	; 0x198 <__do_copy_data+0x10>
     194:	05 90       	lpm	r0, Z+
     196:	0d 92       	st	X+, r0
     198:	a2 34       	cpi	r26, 0x42	; 66
     19a:	b1 07       	cpc	r27, r17
     19c:	d9 f7       	brne	.-10     	; 0x194 <__do_copy_data+0xc>

0000019e <__do_clear_bss>:
     19e:	21 e0       	ldi	r18, 0x01	; 1
     1a0:	a2 e4       	ldi	r26, 0x42	; 66
     1a2:	b1 e0       	ldi	r27, 0x01	; 1
     1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <.do_clear_bss_start>

000001a6 <.do_clear_bss_loop>:
     1a6:	1d 92       	st	X+, r1

000001a8 <.do_clear_bss_start>:
     1a8:	ae 35       	cpi	r26, 0x5E	; 94
     1aa:	b2 07       	cpc	r27, r18
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <.do_clear_bss_loop>
     1ae:	ce d1       	rcall	.+924    	; 0x54c <main>
     1b0:	0c 94 80 09 	jmp	0x1300	; 0x1300 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	25 cf       	rjmp	.-438    	; 0x0 <__vectors>

000001b6 <Ports_Init>:


void Ports_Init() {

	// Init cols
	DDRB  |= 0b00001101; // B0,B2,B3
     1b6:	84 b1       	in	r24, 0x04	; 4
     1b8:	8d 60       	ori	r24, 0x0D	; 13
     1ba:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0b00001101;
     1bc:	85 b1       	in	r24, 0x05	; 5
     1be:	8d 60       	ori	r24, 0x0D	; 13
     1c0:	85 b9       	out	0x05, r24	; 5
	DDRC  |= 0b01110000; // C4,C5,C6
     1c2:	87 b1       	in	r24, 0x07	; 7
     1c4:	80 67       	ori	r24, 0x70	; 112
     1c6:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0b01110000;
     1c8:	88 b1       	in	r24, 0x08	; 8
     1ca:	80 67       	ori	r24, 0x70	; 112
     1cc:	88 b9       	out	0x08, r24	; 8
	DDRD  |= 0b01100011; // D0,D1,D5, D6(Led)
     1ce:	8a b1       	in	r24, 0x0a	; 10
     1d0:	83 66       	ori	r24, 0x63	; 99
     1d2:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0b01100011; // LED Off
     1d4:	8b b1       	in	r24, 0x0b	; 11
     1d6:	83 66       	ori	r24, 0x63	; 99
     1d8:	8b b9       	out	0x0b, r24	; 11

	// Init rows (PullUp)
	DDRB &= ~0b00010010; // B1,B4
     1da:	84 b1       	in	r24, 0x04	; 4
     1dc:	8d 7e       	andi	r24, 0xED	; 237
     1de:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0b00010010;
     1e0:	85 b1       	in	r24, 0x05	; 5
     1e2:	82 61       	ori	r24, 0x12	; 18
     1e4:	85 b9       	out	0x05, r24	; 5
	DDRC &= ~0b00010100; // C2,C4
     1e6:	87 b1       	in	r24, 0x07	; 7
     1e8:	8b 7e       	andi	r24, 0xEB	; 235
     1ea:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0b00010100;
     1ec:	88 b1       	in	r24, 0x08	; 8
     1ee:	84 61       	ori	r24, 0x14	; 20
     1f0:	88 b9       	out	0x08, r24	; 8
	DDRD &= ~0b00010000; // D4
     1f2:	54 98       	cbi	0x0a, 4	; 10
	PORTD |= 0b00010000;
     1f4:	5c 9a       	sbi	0x0b, 4	; 11
     1f6:	08 95       	ret

000001f8 <LED_On>:
}

void LED_On() {
	PORTD &= ~(1<<6);
     1f8:	5e 98       	cbi	0x0b, 6	; 11
     1fa:	08 95       	ret

000001fc <LED_Off>:
}
void LED_Off() {
	PORTD |= 1<<6;
     1fc:	5e 9a       	sbi	0x0b, 6	; 11
     1fe:	08 95       	ret

00000200 <LED_Switch>:
}
void LED_Toggle() {
	PIND ^= 1<<6;
}
void LED_Switch(bool on) {
	if (on) LED_On(); else LED_Off();
     200:	81 11       	cpse	r24, r1
     202:	fa cf       	rjmp	.-12     	; 0x1f8 <LED_On>
     204:	fb cf       	rjmp	.-10     	; 0x1fc <LED_Off>

00000206 <Keyboard_Scan>:
     206:	10 92 42 01 	sts	0x0142, r1

uint8_t Chords[4] = {0,0,0,0};

void Keyboard_Scan() {
	Chords[0] = 0;
	Chords[1] = 0;
     20a:	10 92 43 01 	sts	0x0143, r1
	Chords[2] = 0;
     20e:	10 92 44 01 	sts	0x0144, r1
	Chords[3] = 0;
     212:	10 92 45 01 	sts	0x0145, r1

	PORTB &= ~(1<<0); // B0
     216:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     218:	85 e0       	ldi	r24, 0x05	; 5
     21a:	8a 95       	dec	r24
     21c:	f1 f7       	brne	.-4      	; 0x21a <Keyboard_Scan+0x14>
     21e:	00 00       	nop
	_delay_us(1);
	if (! (PINC & 1<<2)) Chords[0] |= 1<<1; // C2
     220:	32 99       	sbic	0x06, 2	; 6
     222:	05 c0       	rjmp	.+10     	; 0x22e <Keyboard_Scan+0x28>
     224:	80 91 42 01 	lds	r24, 0x0142
     228:	82 60       	ori	r24, 0x02	; 2
     22a:	80 93 42 01 	sts	0x0142, r24
	if (! (PIND & 1<<4)) Chords[1] |= 1<<1; // D4
     22e:	4c 99       	sbic	0x09, 4	; 9
     230:	05 c0       	rjmp	.+10     	; 0x23c <Keyboard_Scan+0x36>
     232:	80 91 43 01 	lds	r24, 0x0143
     236:	82 60       	ori	r24, 0x02	; 2
     238:	80 93 43 01 	sts	0x0143, r24
	if (! (PINB & 1<<1)) Chords[0] |= 1<<0; // B1
     23c:	19 99       	sbic	0x03, 1	; 3
     23e:	05 c0       	rjmp	.+10     	; 0x24a <Keyboard_Scan+0x44>
     240:	80 91 42 01 	lds	r24, 0x0142
     244:	81 60       	ori	r24, 0x01	; 1
     246:	80 93 42 01 	sts	0x0142, r24
	PORTB |= 1<<0;
     24a:	28 9a       	sbi	0x05, 0	; 5

	PORTD &= ~(1<<1); // D1
     24c:	59 98       	cbi	0x0b, 1	; 11
     24e:	95 e0       	ldi	r25, 0x05	; 5
     250:	9a 95       	dec	r25
     252:	f1 f7       	brne	.-4      	; 0x250 <Keyboard_Scan+0x4a>
     254:	00 00       	nop
	_delay_us(1);
	if (! (PINC & 1<<2)) Chords[0] |= 1<<2; // C2
     256:	32 99       	sbic	0x06, 2	; 6
     258:	05 c0       	rjmp	.+10     	; 0x264 <Keyboard_Scan+0x5e>
     25a:	80 91 42 01 	lds	r24, 0x0142
     25e:	84 60       	ori	r24, 0x04	; 4
     260:	80 93 42 01 	sts	0x0142, r24
	if (! (PIND & 1<<4)) Chords[1] |= 1<<2; // D4
     264:	4c 99       	sbic	0x09, 4	; 9
     266:	05 c0       	rjmp	.+10     	; 0x272 <Keyboard_Scan+0x6c>
     268:	80 91 43 01 	lds	r24, 0x0143
     26c:	84 60       	ori	r24, 0x04	; 4
     26e:	80 93 43 01 	sts	0x0143, r24
	if (! (PINB & 1<<1)) Chords[1] |= 1<<0; // B1
     272:	19 99       	sbic	0x03, 1	; 3
     274:	05 c0       	rjmp	.+10     	; 0x280 <Keyboard_Scan+0x7a>
     276:	80 91 43 01 	lds	r24, 0x0143
     27a:	81 60       	ori	r24, 0x01	; 1
     27c:	80 93 43 01 	sts	0x0143, r24
	PORTD |= 1<<1;
     280:	59 9a       	sbi	0x0b, 1	; 11

	PORTD &= ~(1<<5); // D5
     282:	5d 98       	cbi	0x0b, 5	; 11
     284:	85 e0       	ldi	r24, 0x05	; 5
     286:	8a 95       	dec	r24
     288:	f1 f7       	brne	.-4      	; 0x286 <Keyboard_Scan+0x80>
     28a:	00 00       	nop
	_delay_us(1);
	if (! (PINC & 1<<2)) Chords[0] |= 1<<3; // C2
     28c:	32 99       	sbic	0x06, 2	; 6
     28e:	05 c0       	rjmp	.+10     	; 0x29a <Keyboard_Scan+0x94>
     290:	80 91 42 01 	lds	r24, 0x0142
     294:	88 60       	ori	r24, 0x08	; 8
     296:	80 93 42 01 	sts	0x0142, r24
	if (! (PIND & 1<<4)) Chords[1] |= 1<<3; // D4
     29a:	4c 99       	sbic	0x09, 4	; 9
     29c:	05 c0       	rjmp	.+10     	; 0x2a8 <Keyboard_Scan+0xa2>
     29e:	80 91 43 01 	lds	r24, 0x0143
     2a2:	88 60       	ori	r24, 0x08	; 8
     2a4:	80 93 43 01 	sts	0x0143, r24
	PORTD |= 1<<5;
     2a8:	5d 9a       	sbi	0x0b, 5	; 11

	PORTD &= ~(1<<0); // D0
     2aa:	58 98       	cbi	0x0b, 0	; 11
     2ac:	95 e0       	ldi	r25, 0x05	; 5
     2ae:	9a 95       	dec	r25
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <Keyboard_Scan+0xa8>
     2b2:	00 00       	nop
	_delay_us(1);
	if (! (PINC & 1<<2)) Chords[0] |= 1<<4; // C2
     2b4:	32 99       	sbic	0x06, 2	; 6
     2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <Keyboard_Scan+0xbc>
     2b8:	80 91 42 01 	lds	r24, 0x0142
     2bc:	80 61       	ori	r24, 0x10	; 16
     2be:	80 93 42 01 	sts	0x0142, r24
	if (! (PIND & 1<<4)) Chords[1] |= 1<<4; // D4
     2c2:	4c 99       	sbic	0x09, 4	; 9
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <Keyboard_Scan+0xca>
     2c6:	80 91 43 01 	lds	r24, 0x0143
     2ca:	80 61       	ori	r24, 0x10	; 16
     2cc:	80 93 43 01 	sts	0x0143, r24
	PORTD |= 1<<0;
     2d0:	58 9a       	sbi	0x0b, 0	; 11

	PORTB &= ~(1<<2); // B2
     2d2:	2a 98       	cbi	0x05, 2	; 5
     2d4:	85 e0       	ldi	r24, 0x05	; 5
     2d6:	8a 95       	dec	r24
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <Keyboard_Scan+0xd0>
     2da:	00 00       	nop
	_delay_us(1);
	if (! (PINC & 1<<4)) Chords[2] |= 1<<1; // C4
     2dc:	34 99       	sbic	0x06, 4	; 6
     2de:	05 c0       	rjmp	.+10     	; 0x2ea <Keyboard_Scan+0xe4>
     2e0:	80 91 44 01 	lds	r24, 0x0144
     2e4:	82 60       	ori	r24, 0x02	; 2
     2e6:	80 93 44 01 	sts	0x0144, r24
	if (! (PINB & 1<<4)) Chords[3] |= 1<<1; // B4
     2ea:	1c 99       	sbic	0x03, 4	; 3
     2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <Keyboard_Scan+0xf2>
     2ee:	80 91 45 01 	lds	r24, 0x0145
     2f2:	82 60       	ori	r24, 0x02	; 2
     2f4:	80 93 45 01 	sts	0x0145, r24
	if (! (PINB & 1<<1)) Chords[2] |= 1<<0; // B1
     2f8:	19 99       	sbic	0x03, 1	; 3
     2fa:	05 c0       	rjmp	.+10     	; 0x306 <__stack+0x7>
     2fc:	80 91 44 01 	lds	r24, 0x0144
     300:	81 60       	ori	r24, 0x01	; 1
     302:	80 93 44 01 	sts	0x0144, r24
	PORTB |= 1<<2;
     306:	2a 9a       	sbi	0x05, 2	; 5

	PORTC &= ~(1<<6); // C6
     308:	46 98       	cbi	0x08, 6	; 8
     30a:	95 e0       	ldi	r25, 0x05	; 5
     30c:	9a 95       	dec	r25
     30e:	f1 f7       	brne	.-4      	; 0x30c <__stack+0xd>
     310:	00 00       	nop
	_delay_us(1);
	if (! (PINC & 1<<4)) Chords[2] |= 1<<2; // C2
     312:	34 99       	sbic	0x06, 4	; 6
     314:	05 c0       	rjmp	.+10     	; 0x320 <__stack+0x21>
     316:	80 91 44 01 	lds	r24, 0x0144
     31a:	84 60       	ori	r24, 0x04	; 4
     31c:	80 93 44 01 	sts	0x0144, r24
	if (! (PINB & 1<<4)) Chords[3] |= 1<<2; // B4
     320:	1c 99       	sbic	0x03, 4	; 3
     322:	05 c0       	rjmp	.+10     	; 0x32e <__stack+0x2f>
     324:	80 91 45 01 	lds	r24, 0x0145
     328:	84 60       	ori	r24, 0x04	; 4
     32a:	80 93 45 01 	sts	0x0145, r24
	if (! (PINB & 1<<1)) Chords[3] |= 1<<0; // B1
     32e:	19 99       	sbic	0x03, 1	; 3
     330:	05 c0       	rjmp	.+10     	; 0x33c <__stack+0x3d>
     332:	80 91 45 01 	lds	r24, 0x0145
     336:	81 60       	ori	r24, 0x01	; 1
     338:	80 93 45 01 	sts	0x0145, r24
	PORTC |= 1<<6;
     33c:	46 9a       	sbi	0x08, 6	; 8

	PORTC &= ~(1<<5); // C5
     33e:	45 98       	cbi	0x08, 5	; 8
     340:	85 e0       	ldi	r24, 0x05	; 5
     342:	8a 95       	dec	r24
     344:	f1 f7       	brne	.-4      	; 0x342 <__stack+0x43>
     346:	00 00       	nop
	_delay_us(1);
	if (! (PINC & 1<<4)) Chords[2] |= 1<<3; // C4
     348:	34 99       	sbic	0x06, 4	; 6
     34a:	05 c0       	rjmp	.+10     	; 0x356 <__stack+0x57>
     34c:	80 91 44 01 	lds	r24, 0x0144
     350:	88 60       	ori	r24, 0x08	; 8
     352:	80 93 44 01 	sts	0x0144, r24
	if (! (PINB & 1<<4)) Chords[3] |= 1<<3; // B4
     356:	1c 99       	sbic	0x03, 4	; 3
     358:	05 c0       	rjmp	.+10     	; 0x364 <__stack+0x65>
     35a:	80 91 45 01 	lds	r24, 0x0145
     35e:	88 60       	ori	r24, 0x08	; 8
     360:	80 93 45 01 	sts	0x0145, r24
	PORTC |= 1<<5;
     364:	45 9a       	sbi	0x08, 5	; 8

	PORTB &= ~(1<<3); // B3
     366:	2b 98       	cbi	0x05, 3	; 5
     368:	95 e0       	ldi	r25, 0x05	; 5
     36a:	9a 95       	dec	r25
     36c:	f1 f7       	brne	.-4      	; 0x36a <__stack+0x6b>
     36e:	00 00       	nop
	_delay_us(1);
	if (! (PINC & 1<<4)) Chords[2] |= 1<<4; // C4
     370:	34 99       	sbic	0x06, 4	; 6
     372:	05 c0       	rjmp	.+10     	; 0x37e <__stack+0x7f>
     374:	80 91 44 01 	lds	r24, 0x0144
     378:	80 61       	ori	r24, 0x10	; 16
     37a:	80 93 44 01 	sts	0x0144, r24
	if (! (PINB & 1<<4)) Chords[3] |= 1<<4; // B4
     37e:	1c 99       	sbic	0x03, 4	; 3
     380:	05 c0       	rjmp	.+10     	; 0x38c <__stack+0x8d>
     382:	80 91 45 01 	lds	r24, 0x0145
     386:	80 61       	ori	r24, 0x10	; 16
     388:	80 93 45 01 	sts	0x0145, r24
	PORTB |= 1<<3;
     38c:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     38e:	8f e1       	ldi	r24, 0x1F	; 31
     390:	9e e4       	ldi	r25, 0x4E	; 78
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <__stack+0x93>
     396:	00 c0       	rjmp	.+0      	; 0x398 <__stack+0x99>
     398:	00 00       	nop
     39a:	08 95       	ret

0000039c <Hardware_Setup>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void Hardware_Setup()
{
	// Set for 16 MHz clock
	CLKPR = 0x80; CLKPR = 0;
     39c:	e1 e6       	ldi	r30, 0x61	; 97
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 e8       	ldi	r24, 0x80	; 128
     3a2:	80 83       	st	Z, r24
     3a4:	10 82       	st	Z, r1

	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3a6:	84 b7       	in	r24, 0x34	; 52
     3a8:	87 7f       	andi	r24, 0xF7	; 247
     3aa:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	a8 95       	wdr
     3b2:	80 91 60 00 	lds	r24, 0x0060
     3b6:	88 61       	ori	r24, 0x18	; 24
     3b8:	80 93 60 00 	sts	0x0060, r24
     3bc:	10 92 60 00 	sts	0x0060, r1
     3c0:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	80 e8       	ldi	r24, 0x80	; 128
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	80 93 61 00 	sts	0x0061, r24
     3ce:	90 93 61 00 	sts	0x0061, r25
     3d2:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	Ports_Init();
     3d4:	f0 de       	rcall	.-544    	; 0x1b6 <Ports_Init>
     3d6:	54 c3       	rjmp	.+1704   	; 0xa80 <USB_Init>

000003d8 <EVENT_USB_Device_Connect>:
	USB_Init();
     3d8:	08 95       	ret

000003da <EVENT_USB_Device_Disconnect>:
     3da:	08 95       	ret

000003dc <EVENT_USB_Device_ConfigurationChanged>:
    //LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     3dc:	cf 93       	push	r28
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     3de:	81 e3       	ldi	r24, 0x31	; 49
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	96 d6       	rcall	.+3372   	; 0x1110 <HID_Device_ConfigureEndpoints>
     3e4:	c8 2f       	mov	r28, r24
     3e6:	81 e2       	ldi	r24, 0x21	; 33
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	92 d6       	rcall	.+3364   	; 0x1110 <HID_Device_ConfigureEndpoints>
     3ec:	e2 ee       	ldi	r30, 0xE2	; 226
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     3f0:	90 81       	ld	r25, Z
     3f2:	94 60       	ori	r25, 0x04	; 4
     3f4:	90 83       	st	Z, r25
     3f6:	8c 23       	and	r24, r28
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	89 27       	eor	r24, r25

	USB_Device_EnableSOFEvents();

	LED_Switch(! ConfigSuccess);
     3fc:	cf 91       	pop	r28
     3fe:	00 cf       	rjmp	.-512    	; 0x200 <LED_Switch>

00000400 <EVENT_USB_Device_ControlRequest>:
}
     400:	81 e3       	ldi	r24, 0x31	; 49
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);

	USB_Device_EnableSOFEvents();

	LED_Switch(! ConfigSuccess);
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	51 d5       	rcall	.+2722   	; 0xea8 <HID_Device_ProcessControlRequest>
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     406:	81 e2       	ldi	r24, 0x21	; 33
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	4e c5       	rjmp	.+2716   	; 0xea8 <HID_Device_ProcessControlRequest>

0000040c <EVENT_USB_Device_StartOfFrame>:
     40c:	80 91 3f 01 	lds	r24, 0x013F
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     410:	90 91 40 01 	lds	r25, 0x0140
     414:	00 97       	sbiw	r24, 0x00	; 0
     416:	29 f0       	breq	.+10     	; 0x422 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	90 93 40 01 	sts	0x0140, r25
     41e:	80 93 3f 01 	sts	0x013F, r24
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     422:	80 91 2f 01 	lds	r24, 0x012F
     426:	90 91 30 01 	lds	r25, 0x0130
     42a:	00 97       	sbiw	r24, 0x00	; 0
     42c:	29 f0       	breq	.+10     	; 0x438 <EVENT_USB_Device_StartOfFrame+0x2c>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	90 93 30 01 	sts	0x0130, r25
     434:	80 93 2f 01 	sts	0x012F, r24
     438:	08 95       	ret

0000043a <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
	//uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	//uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	/* Determine which interface must have its report generated */
	if (HIDInterfaceInfo == &Keyboard_HID_Interface) {
     44a:	81 53       	subi	r24, 0x31	; 49
     44c:	91 40       	sbci	r25, 0x01	; 1
     44e:	09 f0       	breq	.+2      	; 0x452 <CALLBACK_HID_Device_CreateHIDReport+0x18>
     450:	6d c0       	rjmp	.+218    	; 0x52c <CALLBACK_HID_Device_CreateHIDReport+0xf2>
     452:	79 01       	movw	r14, r18
		USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
		uint8_t chords0 = Chords[0];
     454:	d0 91 42 01 	lds	r29, 0x0142
		uint8_t chords1 = Chords[1];
     458:	c0 91 43 01 	lds	r28, 0x0143
		uint8_t chords2 = Chords[2];
     45c:	c0 90 44 01 	lds	r12, 0x0144
		uint8_t chords3 = Chords[3];
     460:	d0 90 45 01 	lds	r13, 0x0145
	
		uint8_t usedKeyCodes = 0;

		Keyboard_Scan();
     464:	d0 de       	rcall	.-608    	; 0x206 <Keyboard_Scan>
     466:	90 91 42 01 	lds	r25, 0x0142

		// Left chords
		if (Chords[0] < chords0 || Chords[1] < chords1) {
     46a:	9d 17       	cp	r25, r29
     46c:	20 f0       	brcs	.+8      	; 0x476 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
     46e:	80 91 43 01 	lds	r24, 0x0143
     472:	8c 17       	cp	r24, r28
     474:	f8 f4       	brcc	.+62     	; 0x4b4 <CALLBACK_HID_Device_CreateHIDReport+0x7a>
     476:	80 91 01 01 	lds	r24, 0x0101
			if (Chord_Growing_L) {
     47a:	88 23       	and	r24, r24
     47c:	11 f1       	breq	.+68     	; 0x4c2 <CALLBACK_HID_Device_CreateHIDReport+0x88>
     47e:	10 92 01 01 	sts	0x0101, r1
				Chord_Growing_L = false;
     482:	dd 23       	and	r29, r29
				uint8_t layer = 0;
				/*if (chords0 == CHORD_NUM) layer = 1;
				if (chords0 == CHORD_SYM) layer = 2;
				if (chords0 == CHORD_NAV) layer = 3;*/
				if (chords0) {
     484:	49 f0       	breq	.+18     	; 0x498 <CALLBACK_HID_Device_CreateHIDReport+0x5e>
     486:	ed 2f       	mov	r30, r29
					uint8_t keyCode = Layers[layer][chords0-1];
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	ef 5f       	subi	r30, 0xFF	; 255
     48c:	fe 4f       	sbci	r31, 0xFE	; 254
     48e:	80 81       	ld	r24, Z
     490:	f7 01       	movw	r30, r14
					KeyboardReport->KeyCode[usedKeyCodes++] = keyCode;
     492:	82 83       	std	Z+2, r24	; 0x02
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	01 c0       	rjmp	.+2      	; 0x49a <CALLBACK_HID_Device_CreateHIDReport+0x60>
     498:	80 e0       	ldi	r24, 0x00	; 0
		uint8_t chords0 = Chords[0];
		uint8_t chords1 = Chords[1];
		uint8_t chords2 = Chords[2];
		uint8_t chords3 = Chords[3];
	
		uint8_t usedKeyCodes = 0;
     49a:	cc 23       	and	r28, r28
				if (chords0 == CHORD_NAV) layer = 3;*/
				if (chords0) {
					uint8_t keyCode = Layers[layer][chords0-1];
					KeyboardReport->KeyCode[usedKeyCodes++] = keyCode;
				}
				if (chords1) {
     49c:	99 f0       	breq	.+38     	; 0x4c4 <CALLBACK_HID_Device_CreateHIDReport+0x8a>
     49e:	ec 2f       	mov	r30, r28
					uint8_t keyCode = Layers[layer][chords1-1];
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	ef 5f       	subi	r30, 0xFF	; 255
     4a4:	fe 4f       	sbci	r31, 0xFE	; 254
     4a6:	90 81       	ld	r25, Z
     4a8:	f7 01       	movw	r30, r14
					KeyboardReport->KeyCode[usedKeyCodes++] = keyCode;
     4aa:	e8 0f       	add	r30, r24
     4ac:	f1 1d       	adc	r31, r1
     4ae:	92 83       	std	Z+2, r25	; 0x02
     4b0:	8f 5f       	subi	r24, 0xFF	; 255
     4b2:	08 c0       	rjmp	.+16     	; 0x4c4 <CALLBACK_HID_Device_CreateHIDReport+0x8a>
     4b4:	d9 17       	cp	r29, r25
				}
			}
		} else if (Chords[0] > chords0 || Chords[1] > chords1) {
     4b6:	10 f0       	brcs	.+4      	; 0x4bc <CALLBACK_HID_Device_CreateHIDReport+0x82>
     4b8:	c8 17       	cp	r28, r24
     4ba:	18 f4       	brcc	.+6      	; 0x4c2 <CALLBACK_HID_Device_CreateHIDReport+0x88>
     4bc:	81 e0       	ldi	r24, 0x01	; 1
			Chord_Growing_L = true;
     4be:	80 93 01 01 	sts	0x0101, r24
     4c2:	80 e0       	ldi	r24, 0x00	; 0
		uint8_t chords0 = Chords[0];
		uint8_t chords1 = Chords[1];
		uint8_t chords2 = Chords[2];
		uint8_t chords3 = Chords[3];
	
		uint8_t usedKeyCodes = 0;
     4c4:	20 91 44 01 	lds	r18, 0x0144
			Chord_Growing_L = true;

		}

		// Right chords
		if (Chords[2] < chords2 || Chords[3] < chords3) {
     4c8:	2c 15       	cp	r18, r12
     4ca:	20 f0       	brcs	.+8      	; 0x4d4 <CALLBACK_HID_Device_CreateHIDReport+0x9a>
     4cc:	90 91 45 01 	lds	r25, 0x0145
     4d0:	9d 15       	cp	r25, r13
     4d2:	f0 f4       	brcc	.+60     	; 0x510 <CALLBACK_HID_Device_CreateHIDReport+0xd6>
     4d4:	90 91 00 01 	lds	r25, 0x0100
			if (Chord_Growing_R) {
     4d8:	99 23       	and	r25, r25
     4da:	09 f1       	breq	.+66     	; 0x51e <CALLBACK_HID_Device_CreateHIDReport+0xe4>
     4dc:	10 92 00 01 	sts	0x0100, r1
				Chord_Growing_R = false;
     4e0:	cc 20       	and	r12, r12
				uint8_t layer = 0;
				/*if (chords0 == CHORD_NUM) layer = 1;
				if (chords0 == CHORD_SYM) layer = 2;
				if (chords0 == CHORD_NAV) layer = 3;*/
				if (chords2) {
     4e2:	51 f0       	breq	.+20     	; 0x4f8 <CALLBACK_HID_Device_CreateHIDReport+0xbe>
     4e4:	ec 2d       	mov	r30, r12
					uint8_t keyCode = Layers[layer][chords2-1];
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	ef 5f       	subi	r30, 0xFF	; 255
     4ea:	fe 4f       	sbci	r31, 0xFE	; 254
     4ec:	90 81       	ld	r25, Z
     4ee:	f7 01       	movw	r30, r14
					KeyboardReport->KeyCode[usedKeyCodes++] = keyCode;
     4f0:	e8 0f       	add	r30, r24
     4f2:	f1 1d       	adc	r31, r1
     4f4:	92 83       	std	Z+2, r25	; 0x02
     4f6:	8f 5f       	subi	r24, 0xFF	; 255
     4f8:	dd 20       	and	r13, r13
				}
				if (chords3) {
     4fa:	89 f0       	breq	.+34     	; 0x51e <CALLBACK_HID_Device_CreateHIDReport+0xe4>
     4fc:	ad 2d       	mov	r26, r13
					uint8_t keyCode = Layers[layer][chords3-1];
     4fe:	b0 e0       	ldi	r27, 0x00	; 0
     500:	af 5f       	subi	r26, 0xFF	; 255
     502:	be 4f       	sbci	r27, 0xFE	; 254
     504:	9c 91       	ld	r25, X
     506:	f7 01       	movw	r30, r14
					KeyboardReport->KeyCode[usedKeyCodes++] = keyCode;
     508:	e8 0f       	add	r30, r24
     50a:	f1 1d       	adc	r31, r1
     50c:	92 83       	std	Z+2, r25	; 0x02
     50e:	07 c0       	rjmp	.+14     	; 0x51e <CALLBACK_HID_Device_CreateHIDReport+0xe4>
     510:	c2 16       	cp	r12, r18
				}
			}			
		} else if (Chords[2] > chords2 || Chords[3] > chords3) {
     512:	10 f0       	brcs	.+4      	; 0x518 <CALLBACK_HID_Device_CreateHIDReport+0xde>
     514:	d9 16       	cp	r13, r25
     516:	18 f4       	brcc	.+6      	; 0x51e <CALLBACK_HID_Device_CreateHIDReport+0xe4>
     518:	81 e0       	ldi	r24, 0x01	; 1
			Chord_Growing_R = true;
     51a:	80 93 00 01 	sts	0x0100, r24
     51e:	88 e0       	ldi	r24, 0x08	; 8

		}

		//KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;

		*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	f8 01       	movw	r30, r16
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	80 e0       	ldi	r24, 0x00	; 0
		return false;
     52a:	06 c0       	rjmp	.+12     	; 0x538 <CALLBACK_HID_Device_CreateHIDReport+0xfe>
     52c:	83 e0       	ldi	r24, 0x03	; 3
		  MouseReport->X =  1;

		if (JoyStatus_LCL & JOY_PRESS)
		  MouseReport->Button |= (1 << 0);*/

		*ReportSize = sizeof(USB_MouseReport_Data_t);
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	f8 01       	movw	r30, r16
     532:	91 83       	std	Z+1, r25	; 0x01
     534:	80 83       	st	Z, r24
     536:	81 e0       	ldi	r24, 0x01	; 1
		return true;
     538:	df 91       	pop	r29
	}
}
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	df 90       	pop	r13
     546:	cf 90       	pop	r12
     548:	08 95       	ret

0000054a <CALLBACK_HID_Device_ProcessHIDReport>:
     54a:	08 95       	ret

0000054c <main>:
		LEDs_SetAllLEDs(LEDMask);*/
	}
}

int main(void) {
	Hardware_Setup();
     54c:	27 df       	rcall	.-434    	; 0x39c <Hardware_Setup>
     54e:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     550:	81 e3       	ldi	r24, 0x31	; 49
	GlobalInterruptEnable();
	while (true) {
		HID_Device_USBTask(&Keyboard_HID_Interface);
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	f0 d5       	rcall	.+3040   	; 0x1136 <HID_Device_USBTask>
     556:	81 e2       	ldi	r24, 0x21	; 33
     558:	91 e0       	ldi	r25, 0x01	; 1
		HID_Device_USBTask(&Mouse_HID_Interface);
     55a:	ed d5       	rcall	.+3034   	; 0x1136 <HID_Device_USBTask>
     55c:	8b d4       	rcall	.+2326   	; 0xe74 <USB_USBTask>
     55e:	f8 cf       	rjmp	.-16     	; 0x550 <main+0x4>

00000560 <CALLBACK_USB_GetDescriptor>:
     560:	29 2f       	mov	r18, r25
		USB_USBTask();
     562:	33 27       	eor	r19, r19
     564:	23 30       	cpi	r18, 0x03	; 3
	}
     566:	31 05       	cpc	r19, r1
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     568:	c1 f0       	breq	.+48     	; 0x59a <CALLBACK_USB_GetDescriptor+0x3a>
     56a:	5c f4       	brge	.+22     	; 0x582 <CALLBACK_USB_GetDescriptor+0x22>
     56c:	21 30       	cpi	r18, 0x01	; 1
     56e:	31 05       	cpc	r19, r1
     570:	79 f0       	breq	.+30     	; 0x590 <CALLBACK_USB_GetDescriptor+0x30>
     572:	22 30       	cpi	r18, 0x02	; 2
     574:	31 05       	cpc	r19, r1
     576:	a1 f5       	brne	.+104    	; 0x5e0 <CALLBACK_USB_GetDescriptor+0x80>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     578:	8b e3       	ldi	r24, 0x3B	; 59
     57a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     57c:	26 eb       	ldi	r18, 0xB6	; 182
     57e:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     580:	3b c0       	rjmp	.+118    	; 0x5f8 <CALLBACK_USB_GetDescriptor+0x98>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     582:	21 32       	cpi	r18, 0x21	; 33
     584:	31 05       	cpc	r19, r1
     586:	f1 f0       	breq	.+60     	; 0x5c4 <CALLBACK_USB_GetDescriptor+0x64>
     588:	22 32       	cpi	r18, 0x22	; 34
     58a:	31 05       	cpc	r19, r1
     58c:	11 f1       	breq	.+68     	; 0x5d2 <CALLBACK_USB_GetDescriptor+0x72>
     58e:	28 c0       	rjmp	.+80     	; 0x5e0 <CALLBACK_USB_GetDescriptor+0x80>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     590:	82 e1       	ldi	r24, 0x12	; 18
     592:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     594:	21 ef       	ldi	r18, 0xF1	; 241
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	2f c0       	rjmp	.+94     	; 0x5f8 <CALLBACK_USB_GetDescriptor+0x98>
     59a:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	91 05       	cpc	r25, r1
     5a0:	41 f0       	breq	.+16     	; 0x5b2 <CALLBACK_USB_GetDescriptor+0x52>
     5a2:	82 30       	cpi	r24, 0x02	; 2
     5a4:	91 05       	cpc	r25, r1
     5a6:	41 f0       	breq	.+16     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0x58>
     5a8:	89 2b       	or	r24, r25
     5aa:	d1 f4       	brne	.+52     	; 0x5e0 <CALLBACK_USB_GetDescriptor+0x80>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     5ac:	e2 eb       	ldi	r30, 0xB2	; 178
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	05 c0       	rjmp	.+10     	; 0x5bc <CALLBACK_USB_GetDescriptor+0x5c>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     5b2:	e2 ea       	ldi	r30, 0xA2	; 162
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <CALLBACK_USB_GetDescriptor+0x5c>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     5b8:	e8 e8       	ldi	r30, 0x88	; 136
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	84 91       	lpm	r24, Z
     5be:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     5c0:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     5c2:	1a c0       	rjmp	.+52     	; 0x5f8 <CALLBACK_USB_GetDescriptor+0x98>
			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
			{
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
     5c4:	89 e0       	ldi	r24, 0x09	; 9
     5c6:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
     5c8:	66 23       	and	r22, r22
     5ca:	79 f0       	breq	.+30     	; 0x5ea <CALLBACK_USB_GetDescriptor+0x8a>
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}
			else
			{
				Address = &ConfigurationDescriptor.HID2_MouseHID;
     5cc:	21 ee       	ldi	r18, 0xE1	; 225
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	13 c0       	rjmp	.+38     	; 0x5f8 <CALLBACK_USB_GetDescriptor+0x98>
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}

			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
     5d2:	66 23       	and	r22, r22
     5d4:	69 f0       	breq	.+26     	; 0x5f0 <CALLBACK_USB_GetDescriptor+0x90>
				Size    = sizeof(KeyboardReport);
			}
			else
			{
				Address = &MouseReport;
				Size    = sizeof(MouseReport);
     5d6:	8a e3       	ldi	r24, 0x3A	; 58
     5d8:	90 e0       	ldi	r25, 0x00	; 0
				Address = &KeyboardReport;
				Size    = sizeof(KeyboardReport);
			}
			else
			{
				Address = &MouseReport;
     5da:	22 e4       	ldi	r18, 0x42	; 66
     5dc:	31 e0       	ldi	r19, 0x01	; 1
     5de:	0c c0       	rjmp	.+24     	; 0x5f8 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	07 c0       	rjmp	.+14     	; 0x5f8 <CALLBACK_USB_GetDescriptor+0x98>

			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
			{
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
     5ea:	28 ec       	ldi	r18, 0xC8	; 200
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <CALLBACK_USB_GetDescriptor+0x98>
			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
			{
				Address = &KeyboardReport;
				Size    = sizeof(KeyboardReport);
     5f0:	8f e3       	ldi	r24, 0x3F	; 63
     5f2:	90 e0       	ldi	r25, 0x00	; 0

			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
			{
				Address = &KeyboardReport;
     5f4:	23 e0       	ldi	r18, 0x03	; 3
     5f6:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
     5f8:	fa 01       	movw	r30, r20
     5fa:	31 83       	std	Z+1, r19	; 0x01
     5fc:	20 83       	st	Z, r18
	return Size;
}
     5fe:	08 95       	ret

00000600 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	ec 01       	movw	r28, r24
     612:	8b 01       	movw	r16, r22
     614:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     616:	c9 d1       	rcall	.+914    	; 0x9aa <Endpoint_WaitUntilReady>
     618:	81 11       	cpse	r24, r1
     61a:	33 c0       	rjmp	.+102    	; 0x682 <Endpoint_Write_Stream_LE+0x82>
     61c:	e1 14       	cp	r14, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     61e:	f1 04       	cpc	r15, r1
     620:	39 f0       	breq	.+14     	; 0x630 <Endpoint_Write_Stream_LE+0x30>
     622:	f7 01       	movw	r30, r14
	{
		Length -= *BytesProcessed;
     624:	80 81       	ld	r24, Z
     626:	91 81       	ldd	r25, Z+1	; 0x01
     628:	08 1b       	sub	r16, r24
     62a:	19 0b       	sbc	r17, r25
     62c:	c8 0f       	add	r28, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     62e:	d9 1f       	adc	r29, r25
     630:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     632:	d1 2c       	mov	r13, r1
     634:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     636:	11 05       	cpc	r17, r1
     638:	19 f1       	breq	.+70     	; 0x680 <Endpoint_Write_Stream_LE+0x80>
     63a:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     63e:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     640:	16 c0       	rjmp	.+44     	; 0x66e <Endpoint_Write_Stream_LE+0x6e>
     642:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     646:	8e 77       	andi	r24, 0x7E	; 126
     648:	80 93 e8 00 	sts	0x00E8, r24
     64c:	13 d4       	rcall	.+2086   	; 0xe74 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     64e:	e1 14       	cp	r14, r1
     650:	f1 04       	cpc	r15, r1
			#endif

			if (BytesProcessed != NULL)
     652:	49 f0       	breq	.+18     	; 0x666 <Endpoint_Write_Stream_LE+0x66>
     654:	f7 01       	movw	r30, r14
     656:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
     658:	91 81       	ldd	r25, Z+1	; 0x01
     65a:	c8 0e       	add	r12, r24
     65c:	d9 1e       	adc	r13, r25
     65e:	d1 82       	std	Z+1, r13	; 0x01
     660:	c0 82       	st	Z, r12
     662:	85 e0       	ldi	r24, 0x05	; 5
     664:	0e c0       	rjmp	.+28     	; 0x682 <Endpoint_Write_Stream_LE+0x82>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     666:	a1 d1       	rcall	.+834    	; 0x9aa <Endpoint_WaitUntilReady>
     668:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     66a:	21 f3       	breq	.-56     	; 0x634 <Endpoint_Write_Stream_LE+0x34>
     66c:	0a c0       	rjmp	.+20     	; 0x682 <Endpoint_Write_Stream_LE+0x82>
     66e:	89 91       	ld	r24, Y+
     670:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     674:	01 50       	subi	r16, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     676:	11 09       	sbc	r17, r1
     678:	ff ef       	ldi	r31, 0xFF	; 255
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     67a:	cf 1a       	sub	r12, r31
     67c:	df 0a       	sbc	r13, r31
			BytesInTransfer++;
     67e:	da cf       	rjmp	.-76     	; 0x634 <Endpoint_Write_Stream_LE+0x34>
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     686:	1f 91       	pop	r17
}
     688:	0f 91       	pop	r16
     68a:	ff 90       	pop	r15
     68c:	ef 90       	pop	r14
     68e:	df 90       	pop	r13
     690:	cf 90       	pop	r12
     692:	08 95       	ret

00000694 <Endpoint_Write_Control_Stream_LE>:
     694:	20 91 5c 01 	lds	r18, 0x015C
     698:	30 91 5d 01 	lds	r19, 0x015D
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     69c:	26 17       	cp	r18, r22
     69e:	37 07       	cpc	r19, r23
     6a0:	48 f0       	brcs	.+18     	; 0x6b4 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     6a2:	61 15       	cp	r22, r1
     6a4:	71 05       	cpc	r23, r1
     6a6:	39 f4       	brne	.+14     	; 0x6b6 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6a8:	20 91 e8 00 	lds	r18, 0x00E8
     6ac:	2e 77       	andi	r18, 0x7E	; 126
     6ae:	20 93 e8 00 	sts	0x00E8, r18
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <Endpoint_Write_Control_Stream_LE+0x22>
     6b4:	b9 01       	movw	r22, r18
     6b6:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     6b8:	61 15       	cp	r22, r1
     6ba:	71 05       	cpc	r23, r1
     6bc:	81 f1       	breq	.+96     	; 0x71e <Endpoint_Write_Control_Stream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     6be:	20 91 55 01 	lds	r18, 0x0155

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     6c2:	22 23       	and	r18, r18
     6c4:	e9 f1       	breq	.+122    	; 0x740 <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     6c6:	25 30       	cpi	r18, 0x05	; 5
     6c8:	e9 f1       	breq	.+122    	; 0x744 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     6ca:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     6ce:	23 fd       	sbrc	r18, 3
     6d0:	35 c0       	rjmp	.+106    	; 0x73c <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6d2:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     6d6:	22 fd       	sbrc	r18, 2
     6d8:	2b c0       	rjmp	.+86     	; 0x730 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6da:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     6de:	20 ff       	sbrs	r18, 0
     6e0:	eb cf       	rjmp	.-42     	; 0x6b8 <Endpoint_Write_Control_Stream_LE+0x24>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     6e2:	20 91 f2 00 	lds	r18, 0x00F2
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	fc 01       	movw	r30, r24
     6ea:	cf 01       	movw	r24, r30
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6ec:	61 15       	cp	r22, r1
     6ee:	71 05       	cpc	r23, r1
     6f0:	59 f0       	breq	.+22     	; 0x708 <Endpoint_Write_Control_Stream_LE+0x74>
     6f2:	28 30       	cpi	r18, 0x08	; 8
     6f4:	31 05       	cpc	r19, r1
     6f6:	40 f4       	brcc	.+16     	; 0x708 <Endpoint_Write_Control_Stream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     6f8:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6fa:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     6fe:	61 50       	subi	r22, 0x01	; 1
     700:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     702:	2f 5f       	subi	r18, 0xFF	; 255
     704:	3f 4f       	sbci	r19, 0xFF	; 255
     706:	f1 cf       	rjmp	.-30     	; 0x6ea <Endpoint_Write_Control_Stream_LE+0x56>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     708:	41 e0       	ldi	r20, 0x01	; 1
     70a:	28 30       	cpi	r18, 0x08	; 8
     70c:	31 05       	cpc	r19, r1
     70e:	09 f0       	breq	.+2      	; 0x712 <Endpoint_Write_Control_Stream_LE+0x7e>
     710:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     712:	20 91 e8 00 	lds	r18, 0x00E8
     716:	2e 77       	andi	r18, 0x7E	; 126
     718:	20 93 e8 00 	sts	0x00E8, r18
     71c:	cd cf       	rjmp	.-102    	; 0x6b8 <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     71e:	41 11       	cpse	r20, r1
     720:	ce cf       	rjmp	.-100    	; 0x6be <Endpoint_Write_Control_Stream_LE+0x2a>
     722:	06 c0       	rjmp	.+12     	; 0x730 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     724:	80 91 55 01 	lds	r24, 0x0155

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     728:	88 23       	and	r24, r24
     72a:	51 f0       	breq	.+20     	; 0x740 <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     72c:	85 30       	cpi	r24, 0x05	; 5
     72e:	51 f0       	breq	.+20     	; 0x744 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     730:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     734:	82 ff       	sbrs	r24, 2
     736:	f6 cf       	rjmp	.-20     	; 0x724 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     744:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     746:	08 95       	ret

00000748 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     748:	61 15       	cp	r22, r1
     74a:	71 05       	cpc	r23, r1
     74c:	29 f4       	brne	.+10     	; 0x758 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     74e:	20 91 e8 00 	lds	r18, 0x00E8
     752:	2b 77       	andi	r18, 0x7B	; 123
     754:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     758:	fc 01       	movw	r30, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     75a:	61 15       	cp	r22, r1
     75c:	71 05       	cpc	r23, r1
     75e:	21 f1       	breq	.+72     	; 0x7a8 <Endpoint_Read_Control_Stream_LE+0x60>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     760:	80 91 55 01 	lds	r24, 0x0155

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     764:	88 23       	and	r24, r24
     766:	41 f1       	breq	.+80     	; 0x7b8 <Endpoint_Read_Control_Stream_LE+0x70>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     768:	85 30       	cpi	r24, 0x05	; 5
     76a:	41 f1       	breq	.+80     	; 0x7bc <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     76c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     770:	83 fd       	sbrc	r24, 3
     772:	20 c0       	rjmp	.+64     	; 0x7b4 <Endpoint_Read_Control_Stream_LE+0x6c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     774:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     778:	82 ff       	sbrs	r24, 2
     77a:	ef cf       	rjmp	.-34     	; 0x75a <Endpoint_Read_Control_Stream_LE+0x12>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     77c:	80 91 f2 00 	lds	r24, 0x00F2
		{
			while (Length && Endpoint_BytesInEndpoint())
     780:	88 23       	and	r24, r24
     782:	31 f0       	breq	.+12     	; 0x790 <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     784:	80 91 f1 00 	lds	r24, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     788:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     78a:	61 50       	subi	r22, 0x01	; 1
     78c:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     78e:	b1 f7       	brne	.-20     	; 0x77c <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     790:	80 91 e8 00 	lds	r24, 0x00E8
     794:	8b 77       	andi	r24, 0x7B	; 123
     796:	80 93 e8 00 	sts	0x00E8, r24
     79a:	df cf       	rjmp	.-66     	; 0x75a <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     79c:	80 91 55 01 	lds	r24, 0x0155

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7a0:	88 23       	and	r24, r24
     7a2:	51 f0       	breq	.+20     	; 0x7b8 <Endpoint_Read_Control_Stream_LE+0x70>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7a4:	85 30       	cpi	r24, 0x05	; 5
     7a6:	51 f0       	breq	.+20     	; 0x7bc <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7a8:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     7ac:	80 ff       	sbrs	r24, 0
     7ae:	f6 cf       	rjmp	.-20     	; 0x79c <Endpoint_Read_Control_Stream_LE+0x54>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     7bc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     7be:	08 95       	ret

000007c0 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     7c0:	20 91 5c 01 	lds	r18, 0x015C
     7c4:	30 91 5d 01 	lds	r19, 0x015D
     7c8:	26 17       	cp	r18, r22
     7ca:	37 07       	cpc	r19, r23
     7cc:	48 f0       	brcs	.+18     	; 0x7e0 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     7ce:	61 15       	cp	r22, r1
     7d0:	71 05       	cpc	r23, r1
     7d2:	39 f4       	brne	.+14     	; 0x7e2 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7d4:	20 91 e8 00 	lds	r18, 0x00E8
     7d8:	2e 77       	andi	r18, 0x7E	; 126
     7da:	20 93 e8 00 	sts	0x00E8, r18
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <Endpoint_Write_Control_PStream_LE+0x22>
     7e0:	b9 01       	movw	r22, r18
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     7e6:	61 15       	cp	r22, r1
     7e8:	71 05       	cpc	r23, r1
     7ea:	69 f1       	breq	.+90     	; 0x846 <Endpoint_Write_Control_PStream_LE+0x86>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7ec:	80 91 55 01 	lds	r24, 0x0155

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7f0:	88 23       	and	r24, r24
     7f2:	d1 f1       	breq	.+116    	; 0x868 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7f4:	85 30       	cpi	r24, 0x05	; 5
     7f6:	d1 f1       	breq	.+116    	; 0x86c <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7f8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7fc:	83 fd       	sbrc	r24, 3
     7fe:	32 c0       	rjmp	.+100    	; 0x864 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     800:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     804:	82 fd       	sbrc	r24, 2
     806:	28 c0       	rjmp	.+80     	; 0x858 <Endpoint_Write_Control_PStream_LE+0x98>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     808:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     80c:	80 ff       	sbrs	r24, 0
     80e:	eb cf       	rjmp	.-42     	; 0x7e6 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     810:	80 91 f2 00 	lds	r24, 0x00F2
     814:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     816:	61 15       	cp	r22, r1
     818:	71 05       	cpc	r23, r1
     81a:	59 f0       	breq	.+22     	; 0x832 <Endpoint_Write_Control_PStream_LE+0x72>
     81c:	88 30       	cpi	r24, 0x08	; 8
     81e:	91 05       	cpc	r25, r1
     820:	40 f4       	brcc	.+16     	; 0x832 <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     822:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     824:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     828:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     82a:	61 50       	subi	r22, 0x01	; 1
     82c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	f2 cf       	rjmp	.-28     	; 0x816 <Endpoint_Write_Control_PStream_LE+0x56>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     832:	21 e0       	ldi	r18, 0x01	; 1
     834:	08 97       	sbiw	r24, 0x08	; 8
     836:	09 f0       	breq	.+2      	; 0x83a <Endpoint_Write_Control_PStream_LE+0x7a>
     838:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     83a:	80 91 e8 00 	lds	r24, 0x00E8
     83e:	8e 77       	andi	r24, 0x7E	; 126
     840:	80 93 e8 00 	sts	0x00E8, r24
     844:	d0 cf       	rjmp	.-96     	; 0x7e6 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     846:	21 11       	cpse	r18, r1
     848:	d1 cf       	rjmp	.-94     	; 0x7ec <Endpoint_Write_Control_PStream_LE+0x2c>
     84a:	06 c0       	rjmp	.+12     	; 0x858 <Endpoint_Write_Control_PStream_LE+0x98>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     84c:	80 91 55 01 	lds	r24, 0x0155

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     850:	88 23       	and	r24, r24
     852:	51 f0       	breq	.+20     	; 0x868 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     854:	85 30       	cpi	r24, 0x05	; 5
     856:	51 f0       	breq	.+20     	; 0x86c <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     858:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     85c:	82 ff       	sbrs	r24, 2
     85e:	f6 cf       	rjmp	.-20     	; 0x84c <Endpoint_Write_Control_PStream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     86c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     86e:	08 95       	ret

00000870 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     870:	98 2f       	mov	r25, r24
     872:	95 30       	cpi	r25, 0x05	; 5
     874:	58 f5       	brcc	.+86     	; 0x8cc <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     876:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     87a:	98 17       	cp	r25, r24
     87c:	39 f0       	breq	.+14     	; 0x88c <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     87e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     882:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     886:	50 91 f0 00 	lds	r21, 0x00F0
     88a:	03 c0       	rjmp	.+6      	; 0x892 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     88c:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     88e:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     890:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     892:	21 ff       	sbrs	r18, 1
     894:	19 c0       	rjmp	.+50     	; 0x8c8 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     896:	30 91 eb 00 	lds	r19, 0x00EB
     89a:	3e 7f       	andi	r19, 0xFE	; 254
     89c:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     8a0:	30 91 ed 00 	lds	r19, 0x00ED
     8a4:	3d 7f       	andi	r19, 0xFD	; 253
     8a6:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     8aa:	30 91 eb 00 	lds	r19, 0x00EB
     8ae:	31 60       	ori	r19, 0x01	; 1
     8b0:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     8b4:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     8b8:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     8bc:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     8c0:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     8c4:	27 ff       	sbrs	r18, 7
     8c6:	07 c0       	rjmp	.+14     	; 0x8d6 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     8c8:	9f 5f       	subi	r25, 0xFF	; 255
     8ca:	d3 cf       	rjmp	.-90     	; 0x872 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     8cc:	8f 70       	andi	r24, 0x0F	; 15
     8ce:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     8d6:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     8d8:	08 95       	ret

000008da <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	e6 2e       	mov	r14, r22
     8e8:	ec 01       	movw	r28, r24
     8ea:	8c 01       	movw	r16, r24
     8ec:	0c 5f       	subi	r16, 0xFC	; 252
     8ee:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = 0; i < Entries; i++)
     8f0:	f1 2c       	mov	r15, r1
     8f2:	fe 14       	cp	r15, r14
     8f4:	99 f1       	breq	.+102    	; 0x95c <Endpoint_ConfigureEndpointTable+0x82>
	{
		if (!(Table[i].Address))
     8f6:	98 81       	ld	r25, Y
     8f8:	99 23       	and	r25, r25
     8fa:	59 f1       	breq	.+86     	; 0x952 <Endpoint_ConfigureEndpointTable+0x78>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     8fc:	f8 01       	movw	r30, r16
     8fe:	20 81       	ld	r18, Z
     900:	69 81       	ldd	r22, Y+1	; 0x01
     902:	7a 81       	ldd	r23, Y+2	; 0x02
     904:	31 97       	sbiw	r30, 0x01	; 1
     906:	30 81       	ld	r19, Z
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     908:	89 2f       	mov	r24, r25
     90a:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     90c:	85 30       	cpi	r24, 0x05	; 5
     90e:	10 f0       	brcs	.+4      	; 0x914 <Endpoint_ConfigureEndpointTable+0x3a>
		  return false;
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	25 c0       	rjmp	.+74     	; 0x95e <Endpoint_ConfigureEndpointTable+0x84>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     914:	22 30       	cpi	r18, 0x02	; 2
     916:	10 f4       	brcc	.+4      	; 0x91c <Endpoint_ConfigureEndpointTable+0x42>
     918:	42 e0       	ldi	r20, 0x02	; 2
     91a:	01 c0       	rjmp	.+2      	; 0x91e <Endpoint_ConfigureEndpointTable+0x44>
     91c:	46 e0       	ldi	r20, 0x06	; 6
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     91e:	e8 e0       	ldi	r30, 0x08	; 8
     920:	f0 e0       	ldi	r31, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     922:	20 e0       	ldi	r18, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     924:	e6 17       	cp	r30, r22
     926:	f7 07       	cpc	r31, r23
     928:	20 f4       	brcc	.+8      	; 0x932 <Endpoint_ConfigureEndpointTable+0x58>
				{
					MaskVal++;
     92a:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     92c:	ee 0f       	add	r30, r30
     92e:	ff 1f       	adc	r31, r31
     930:	f9 cf       	rjmp	.-14     	; 0x924 <Endpoint_ConfigureEndpointTable+0x4a>
				}

				return (MaskVal << EPSIZE0);
     932:	22 95       	swap	r18
     934:	20 7f       	andi	r18, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     936:	42 2b       	or	r20, r18
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     938:	23 2f       	mov	r18, r19
     93a:	22 95       	swap	r18
     93c:	22 0f       	add	r18, r18
     93e:	22 0f       	add	r18, r18
     940:	20 7c       	andi	r18, 0xC0	; 192
     942:	99 1f       	adc	r25, r25
     944:	99 27       	eor	r25, r25
     946:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     948:	62 2f       	mov	r22, r18
     94a:	69 2b       	or	r22, r25
     94c:	91 df       	rcall	.-222    	; 0x870 <Endpoint_ConfigureEndpoint_Prv>
     94e:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     950:	f9 f2       	breq	.-66     	; 0x910 <Endpoint_ConfigureEndpointTable+0x36>
     952:	f3 94       	inc	r15
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     954:	25 96       	adiw	r28, 0x05	; 5
     956:	0b 5f       	subi	r16, 0xFB	; 251
     958:	1f 4f       	sbci	r17, 0xFF	; 255
     95a:	cb cf       	rjmp	.-106    	; 0x8f2 <Endpoint_ConfigureEndpointTable+0x18>
     95c:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     95e:	df 91       	pop	r29
}
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	08 95       	ret

0000096c <Endpoint_ClearStatusStage>:
     96c:	80 91 56 01 	lds	r24, 0x0156
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     970:	87 ff       	sbrs	r24, 7
     972:	11 c0       	rjmp	.+34     	; 0x996 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     974:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
     978:	82 fd       	sbrc	r24, 2
     97a:	05 c0       	rjmp	.+10     	; 0x986 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     97c:	80 91 55 01 	lds	r24, 0x0155
     980:	81 11       	cpse	r24, r1
     982:	f8 cf       	rjmp	.-16     	; 0x974 <Endpoint_ClearStatusStage+0x8>
     984:	11 c0       	rjmp	.+34     	; 0x9a8 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     986:	80 91 e8 00 	lds	r24, 0x00E8
     98a:	8b 77       	andi	r24, 0x7B	; 123
     98c:	0b c0       	rjmp	.+22     	; 0x9a4 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     98e:	80 91 55 01 	lds	r24, 0x0155
     992:	88 23       	and	r24, r24
     994:	49 f0       	breq	.+18     	; 0x9a8 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     996:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     99a:	80 ff       	sbrs	r24, 0
     99c:	f8 cf       	rjmp	.-16     	; 0x98e <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     99e:	80 91 e8 00 	lds	r24, 0x00E8
     9a2:	8e 77       	andi	r24, 0x7E	; 126
     9a4:	80 93 e8 00 	sts	0x00E8, r24
     9a8:	08 95       	ret

000009aa <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     9aa:	20 91 e4 00 	lds	r18, 0x00E4
     9ae:	30 91 e5 00 	lds	r19, 0x00E5
     9b2:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     9b4:	40 91 ec 00 	lds	r20, 0x00EC
     9b8:	84 2f       	mov	r24, r20
     9ba:	81 70       	andi	r24, 0x01	; 1
     9bc:	40 ff       	sbrs	r20, 0
     9be:	22 c0       	rjmp	.+68     	; 0xa04 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9c0:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     9c4:	80 fd       	sbrc	r24, 0
     9c6:	1c c0       	rjmp	.+56     	; 0xa00 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9c8:	80 91 55 01 	lds	r24, 0x0155

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9cc:	88 23       	and	r24, r24
     9ce:	91 f0       	breq	.+36     	; 0x9f4 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9d0:	85 30       	cpi	r24, 0x05	; 5
     9d2:	91 f0       	breq	.+36     	; 0x9f8 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     9d4:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     9d8:	85 fd       	sbrc	r24, 5
     9da:	10 c0       	rjmp	.+32     	; 0x9fc <Endpoint_WaitUntilReady+0x52>
     9dc:	40 91 e4 00 	lds	r20, 0x00E4
     9e0:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     9e4:	42 17       	cp	r20, r18
     9e6:	53 07       	cpc	r21, r19
     9e8:	29 f3       	breq	.-54     	; 0x9b4 <Endpoint_WaitUntilReady+0xa>
     9ea:	9a 01       	movw	r18, r20
     9ec:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     9ee:	11 f7       	brne	.-60     	; 0x9b4 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     9f0:	84 e0       	ldi	r24, 0x04	; 4
     9f2:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     9f4:	82 e0       	ldi	r24, 0x02	; 2
     9f6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     9f8:	83 e0       	ldi	r24, 0x03	; 3
     9fa:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a04:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     a08:	42 ff       	sbrs	r20, 2
     a0a:	de cf       	rjmp	.-68     	; 0x9c8 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     a0c:	08 95       	ret

00000a0e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a0e:	41 d0       	rcall	.+130    	; 0xa92 <USB_INT_DisableAllInterrupts>
     a10:	43 d0       	rcall	.+134    	; 0xa98 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a12:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a16:	8f 77       	andi	r24, 0x7F	; 127
     a18:	80 93 d8 00 	sts	0x00D8, r24
     a1c:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     a20:	80 68       	ori	r24, 0x80	; 128
     a22:	80 93 d8 00 	sts	0x00D8, r24
     a26:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a2a:	8f 7d       	andi	r24, 0xDF	; 223
     a2c:	80 93 d8 00 	sts	0x00D8, r24
     a30:	84 e0       	ldi	r24, 0x04	; 4
     a32:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a34:	86 e0       	ldi	r24, 0x06	; 6
     a36:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a38:	09 b4       	in	r0, 0x29	; 41
     a3a:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a3c:	fd cf       	rjmp	.-6      	; 0xa38 <USB_ResetInterface+0x2a>
     a3e:	10 92 55 01 	sts	0x0155, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     a42:	10 92 51 01 	sts	0x0151, r1
	USB_Device_ConfigurationNumber  = 0;
     a46:	10 92 53 01 	sts	0x0153, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     a4a:	10 92 52 01 	sts	0x0152, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     a4e:	42 e0       	ldi	r20, 0x02	; 2
     a50:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	0d df       	rcall	.-486    	; 0x870 <Endpoint_ConfigureEndpoint_Prv>
     a56:	80 91 e1 00 	lds	r24, 0x00E1
     a5a:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a5c:	80 93 e1 00 	sts	0x00E1, r24
     a60:	80 91 e2 00 	lds	r24, 0x00E2
     a64:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a66:	80 93 e2 00 	sts	0x00E2, r24
     a6a:	80 91 e2 00 	lds	r24, 0x00E2
     a6e:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     a70:	80 93 e2 00 	sts	0x00E2, r24
     a74:	80 91 e0 00 	lds	r24, 0x00E0
     a78:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a7a:	80 93 e0 00 	sts	0x00E0, r24
     a7e:	08 95       	ret

00000a80 <USB_Init>:
     a80:	e3 e6       	ldi	r30, 0x63	; 99
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     a86:	8e 7f       	andi	r24, 0xFE	; 254
     a88:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 93 54 01 	sts	0x0154, r24

	USB_ResetInterface();
     a90:	be cf       	rjmp	.-132    	; 0xa0e <USB_ResetInterface>

00000a92 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     a92:	10 92 e2 00 	sts	0x00E2, r1
     a96:	08 95       	ret

00000a98 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     a98:	10 92 e1 00 	sts	0x00E1, r1
     a9c:	08 95       	ret

00000a9e <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a9e:	1f 92       	push	r1
     aa0:	0f 92       	push	r0
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	0f 92       	push	r0
     aa6:	11 24       	eor	r1, r1
     aa8:	2f 93       	push	r18
     aaa:	3f 93       	push	r19
     aac:	4f 93       	push	r20
     aae:	5f 93       	push	r21
     ab0:	6f 93       	push	r22
     ab2:	7f 93       	push	r23
     ab4:	8f 93       	push	r24
     ab6:	9f 93       	push	r25
     ab8:	af 93       	push	r26
     aba:	bf 93       	push	r27
     abc:	ef 93       	push	r30
     abe:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     ac0:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     ac4:	82 ff       	sbrs	r24, 2
     ac6:	0a c0       	rjmp	.+20     	; 0xadc <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     ac8:	80 91 e2 00 	lds	r24, 0x00E2
     acc:	82 ff       	sbrs	r24, 2
     ace:	06 c0       	rjmp	.+12     	; 0xadc <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     ad0:	80 91 e1 00 	lds	r24, 0x00E1
     ad4:	8b 7f       	andi	r24, 0xFB	; 251
     ad6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     ada:	98 dc       	rcall	.-1744   	; 0x40c <EVENT_USB_Device_StartOfFrame>
     adc:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     ae0:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     ae2:	17 c0       	rjmp	.+46     	; 0xb12 <__vector_11+0x74>
     ae4:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     ae8:	80 ff       	sbrs	r24, 0
     aea:	13 c0       	rjmp	.+38     	; 0xb12 <__vector_11+0x74>
     aec:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     af0:	8e 7f       	andi	r24, 0xFE	; 254
     af2:	80 93 e2 00 	sts	0x00E2, r24
     af6:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     afa:	80 61       	ori	r24, 0x10	; 16
     afc:	80 93 e2 00 	sts	0x00E2, r24
     b00:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     b04:	80 62       	ori	r24, 0x20	; 32
     b06:	80 93 d8 00 	sts	0x00D8, r24
     b0a:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b0c:	10 92 55 01 	sts	0x0155, r1

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     b10:	64 dc       	rcall	.-1848   	; 0x3da <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
     b12:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     b16:	84 ff       	sbrs	r24, 4
     b18:	2d c0       	rjmp	.+90     	; 0xb74 <__vector_11+0xd6>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     b1a:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     b1e:	84 ff       	sbrs	r24, 4
     b20:	29 c0       	rjmp	.+82     	; 0xb74 <__vector_11+0xd6>
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b26:	86 e0       	ldi	r24, 0x06	; 6
     b28:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b2a:	09 b4       	in	r0, 0x29	; 41
     b2c:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b2e:	fd cf       	rjmp	.-6      	; 0xb2a <__vector_11+0x8c>
     b30:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b34:	8f 7d       	andi	r24, 0xDF	; 223
     b36:	80 93 d8 00 	sts	0x00D8, r24
     b3a:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     b3e:	8f 7e       	andi	r24, 0xEF	; 239
     b40:	80 93 e1 00 	sts	0x00E1, r24
     b44:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     b48:	8f 7e       	andi	r24, 0xEF	; 239
     b4a:	80 93 e2 00 	sts	0x00E2, r24
     b4e:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b52:	81 60       	ori	r24, 0x01	; 1
     b54:	80 93 e2 00 	sts	0x00E2, r24
     b58:	80 91 51 01 	lds	r24, 0x0151
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     b5c:	81 11       	cpse	r24, r1
     b5e:	06 c0       	rjmp	.+12     	; 0xb6c <__vector_11+0xce>
     b60:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b64:	87 fd       	sbrc	r24, 7
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <__vector_11+0xce>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	01 c0       	rjmp	.+2      	; 0xb6e <__vector_11+0xd0>
     b6c:	84 e0       	ldi	r24, 0x04	; 4
     b6e:	80 93 55 01 	sts	0x0155, r24
     b72:	32 dc       	rcall	.-1948   	; 0x3d8 <EVENT_USB_Device_Connect>
     b74:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     b78:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     b7a:	22 c0       	rjmp	.+68     	; 0xbc0 <__vector_11+0x122>
     b7c:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     b80:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     b82:	1e c0       	rjmp	.+60     	; 0xbc0 <__vector_11+0x122>
     b84:	80 91 e1 00 	lds	r24, 0x00E1
     b88:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     b8a:	80 93 e1 00 	sts	0x00E1, r24
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	80 93 55 01 	sts	0x0155, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     b94:	10 92 51 01 	sts	0x0151, r1
     b98:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
     b9c:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     b9e:	80 93 e1 00 	sts	0x00E1, r24
     ba2:	80 91 e2 00 	lds	r24, 0x00E2
     ba6:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     ba8:	80 93 e2 00 	sts	0x00E2, r24
     bac:	80 91 e2 00 	lds	r24, 0x00E2
     bb0:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     bb2:	80 93 e2 00 	sts	0x00E2, r24
     bb6:	42 e0       	ldi	r20, 0x02	; 2
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     bbc:	59 de       	rcall	.-846    	; 0x870 <Endpoint_ConfigureEndpoint_Prv>
     bbe:	59 d1       	rcall	.+690    	; 0xe72 <USB_Event_Stub>
     bc0:	ff 91       	pop	r31
     bc2:	ef 91       	pop	r30
     bc4:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     bc6:	af 91       	pop	r26
     bc8:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     bca:	8f 91       	pop	r24
     bcc:	7f 91       	pop	r23
     bce:	6f 91       	pop	r22
     bd0:	5f 91       	pop	r21
     bd2:	4f 91       	pop	r20
     bd4:	3f 91       	pop	r19
     bd6:	2f 91       	pop	r18
     bd8:	0f 90       	pop	r0
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	0f 90       	pop	r0
     bde:	1f 90       	pop	r1
     be0:	18 95       	reti

00000be2 <USB_Device_ProcessControlRequest>:
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     bec:	aa 97       	sbiw	r28, 0x2a	; 42
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	e6 e5       	ldi	r30, 0x56	; 86
     bfa:	f1 e0       	ldi	r31, 0x01	; 1
     bfc:	88 e0       	ldi	r24, 0x08	; 8
     bfe:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     c00:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     c04:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     c06:	8e 13       	cpse	r24, r30
     c08:	fb cf       	rjmp	.-10     	; 0xc00 <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     c0a:	fa db       	rcall	.-2060   	; 0x400 <EVENT_USB_Device_ControlRequest>
     c0c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c10:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     c12:	17 c1       	rjmp	.+558    	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
     c14:	80 91 56 01 	lds	r24, 0x0156
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     c18:	90 91 57 01 	lds	r25, 0x0157

		switch (USB_ControlRequest.bRequest)
     c1c:	49 2f       	mov	r20, r25
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	4a 30       	cpi	r20, 0x0A	; 10
     c22:	51 05       	cpc	r21, r1
     c24:	08 f0       	brcs	.+2      	; 0xc28 <USB_Device_ProcessControlRequest+0x46>
     c26:	0d c1       	rjmp	.+538    	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
     c28:	fa 01       	movw	r30, r20
     c2a:	e6 5c       	subi	r30, 0xC6	; 198
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	45 c3       	rjmp	.+1674   	; 0x12ba <__tablejump2__>
     c30:	80 38       	cpi	r24, 0x80	; 128
     c32:	81 f0       	breq	.+32     	; 0xc54 <USB_Device_ProcessControlRequest+0x72>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c34:	82 38       	cpi	r24, 0x82	; 130
     c36:	09 f0       	breq	.+2      	; 0xc3a <USB_Device_ProcessControlRequest+0x58>
     c38:	04 c1       	rjmp	.+520    	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
     c3a:	80 91 5a 01 	lds	r24, 0x015A
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c3e:	8f 70       	andi	r24, 0x0F	; 15
     c40:	80 93 e9 00 	sts	0x00E9, r24
     c44:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c48:	85 fb       	bst	r24, 5
     c4a:	88 27       	eor	r24, r24
     c4c:	80 f9       	bld	r24, 0
     c4e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c52:	06 c0       	rjmp	.+12     	; 0xc60 <USB_Device_ProcessControlRequest+0x7e>
     c54:	80 91 52 01 	lds	r24, 0x0152
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     c58:	90 91 53 01 	lds	r25, 0x0153
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     c5c:	91 11       	cpse	r25, r1
     c5e:	82 60       	ori	r24, 0x02	; 2
     c60:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c64:	97 7f       	andi	r25, 0xF7	; 247
     c66:	90 93 e8 00 	sts	0x00E8, r25
     c6a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     c6e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     c72:	c4 c0       	rjmp	.+392    	; 0xdfc <USB_Device_ProcessControlRequest+0x21a>
     c74:	28 2f       	mov	r18, r24
     c76:	2d 7f       	andi	r18, 0xFD	; 253
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c78:	09 f0       	breq	.+2      	; 0xc7c <USB_Device_ProcessControlRequest+0x9a>
     c7a:	e3 c0       	rjmp	.+454    	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
     c7c:	88 23       	and	r24, r24
     c7e:	19 f0       	breq	.+6      	; 0xc86 <USB_Device_ProcessControlRequest+0xa4>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     c80:	82 30       	cpi	r24, 0x02	; 2
     c82:	61 f0       	breq	.+24     	; 0xc9c <USB_Device_ProcessControlRequest+0xba>
     c84:	de c0       	rjmp	.+444    	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
     c86:	80 91 58 01 	lds	r24, 0x0158
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	09 f0       	breq	.+2      	; 0xc90 <USB_Device_ProcessControlRequest+0xae>
     c8e:	d9 c0       	rjmp	.+434    	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
     c90:	93 30       	cpi	r25, 0x03	; 3
     c92:	09 f0       	breq	.+2      	; 0xc96 <USB_Device_ProcessControlRequest+0xb4>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	80 93 53 01 	sts	0x0153, r24
     c9a:	2b c0       	rjmp	.+86     	; 0xcf2 <USB_Device_ProcessControlRequest+0x110>
     c9c:	80 91 58 01 	lds	r24, 0x0158

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     ca0:	81 11       	cpse	r24, r1
     ca2:	27 c0       	rjmp	.+78     	; 0xcf2 <USB_Device_ProcessControlRequest+0x110>
     ca4:	80 91 5a 01 	lds	r24, 0x015A
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ca8:	8f 70       	andi	r24, 0x0F	; 15
     caa:	09 f4       	brne	.+2      	; 0xcae <USB_Device_ProcessControlRequest+0xcc>
     cac:	ca c0       	rjmp	.+404    	; 0xe42 <USB_Device_ProcessControlRequest+0x260>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     cae:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cb2:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     cb6:	20 ff       	sbrs	r18, 0
     cb8:	1c c0       	rjmp	.+56     	; 0xcf2 <USB_Device_ProcessControlRequest+0x110>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     cba:	93 30       	cpi	r25, 0x03	; 3
     cbc:	21 f4       	brne	.+8      	; 0xcc6 <USB_Device_ProcessControlRequest+0xe4>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     cbe:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     cc2:	80 62       	ori	r24, 0x20	; 32
     cc4:	14 c0       	rjmp	.+40     	; 0xcee <USB_Device_ProcessControlRequest+0x10c>
     cc6:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     cca:	90 61       	ori	r25, 0x10	; 16
     ccc:	90 93 eb 00 	sts	0x00EB, r25
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	30 e0       	ldi	r19, 0x00	; 0
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     cd4:	a9 01       	movw	r20, r18
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <USB_Device_ProcessControlRequest+0xfa>
     cd8:	44 0f       	add	r20, r20
     cda:	55 1f       	adc	r21, r21
     cdc:	8a 95       	dec	r24
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <USB_Device_ProcessControlRequest+0xf6>
     ce0:	40 93 ea 00 	sts	0x00EA, r20
     ce4:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     ce8:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     cec:	88 60       	ori	r24, 0x08	; 8
     cee:	80 93 eb 00 	sts	0x00EB, r24
     cf2:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cf6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cfa:	87 7f       	andi	r24, 0xF7	; 247
     cfc:	82 c0       	rjmp	.+260    	; 0xe02 <USB_Device_ProcessControlRequest+0x220>
     cfe:	81 11       	cpse	r24, r1
     d00:	a0 c0       	rjmp	.+320    	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d02:	10 91 58 01 	lds	r17, 0x0158
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     d06:	1f 77       	andi	r17, 0x7F	; 127
     d08:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     d0c:	80 78       	andi	r24, 0x80	; 128
     d0e:	81 2b       	or	r24, r17
     d10:	80 93 e3 00 	sts	0x00E3, r24
     d14:	80 91 e8 00 	lds	r24, 0x00E8
     d18:	87 7f       	andi	r24, 0xF7	; 247
     d1a:	80 93 e8 00 	sts	0x00E8, r24
     d1e:	26 de       	rcall	.-948    	; 0x96c <Endpoint_ClearStatusStage>
     d20:	80 91 e8 00 	lds	r24, 0x00E8

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     d24:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d26:	fc cf       	rjmp	.-8      	; 0xd20 <USB_Device_ProcessControlRequest+0x13e>
     d28:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
     d2c:	80 68       	ori	r24, 0x80	; 128
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     d2e:	80 93 e3 00 	sts	0x00E3, r24
     d32:	11 11       	cpse	r17, r1
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <USB_Device_ProcessControlRequest+0x158>
     d36:	82 e0       	ldi	r24, 0x02	; 2

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <USB_Device_ProcessControlRequest+0x15a>
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	80 93 55 01 	sts	0x0155, r24
     d40:	80 c0       	rjmp	.+256    	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
     d42:	80 58       	subi	r24, 0x80	; 128
     d44:	82 30       	cpi	r24, 0x02	; 2
     d46:	08 f0       	brcs	.+2      	; 0xd4a <USB_Device_ProcessControlRequest+0x168>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d48:	7c c0       	rjmp	.+248    	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
     d4a:	80 91 58 01 	lds	r24, 0x0158
     d4e:	90 91 59 01 	lds	r25, 0x0159
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     d52:	8c 3d       	cpi	r24, 0xDC	; 220
     d54:	53 e0       	ldi	r21, 0x03	; 3
     d56:	95 07       	cpc	r25, r21
     d58:	71 f5       	brne	.+92     	; 0xdb6 <USB_Device_ProcessControlRequest+0x1d4>
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8a 83       	std	Y+2, r24	; 0x02
     d5e:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     d64:	f8 94       	cli
     d66:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d68:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d6a:	20 e0       	ldi	r18, 0x00	; 0
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     d6c:	3e e0       	ldi	r19, 0x0E	; 14
     d6e:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d70:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     d72:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d74:	50 93 57 00 	sts	0x0057, r21
     d78:	e4 91       	lpm	r30, Z
     d7a:	20 ff       	sbrs	r18, 0
     d7c:	03 c0       	rjmp	.+6      	; 0xd84 <USB_Device_ProcessControlRequest+0x1a2>
     d7e:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
     d80:	ef 70       	andi	r30, 0x0F	; 15
     d82:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
     d84:	ef 70       	andi	r30, 0x0F	; 15
     d86:	8e 2f       	mov	r24, r30
						SigReadAddress++;
     d88:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
     d8a:	ea 30       	cpi	r30, 0x0A	; 10
     d8c:	10 f0       	brcs	.+4      	; 0xd92 <USB_Device_ProcessControlRequest+0x1b0>
     d8e:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     d90:	01 c0       	rjmp	.+2      	; 0xd94 <USB_Device_ProcessControlRequest+0x1b2>
     d92:	c0 96       	adiw	r24, 0x30	; 48
     d94:	8d 93       	st	X+, r24
     d96:	9d 93       	st	X+, r25
     d98:	2f 5f       	subi	r18, 0xFF	; 255
     d9a:	24 31       	cpi	r18, 0x14	; 20
     d9c:	49 f7       	brne	.-46     	; 0xd70 <USB_Device_ProcessControlRequest+0x18e>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d9e:	4f bf       	out	0x3f, r20	; 63
     da0:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     da4:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     da6:	80 93 e8 00 	sts	0x00E8, r24
     daa:	6a e2       	ldi	r22, 0x2A	; 42
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	70 dc       	rcall	.-1824   	; 0x694 <Endpoint_Write_Control_Stream_LE>
     db4:	12 c0       	rjmp	.+36     	; 0xdda <USB_Device_ProcessControlRequest+0x1f8>
     db6:	ae 01       	movw	r20, r28
     db8:	4f 5f       	subi	r20, 0xFF	; 255
     dba:	5f 4f       	sbci	r21, 0xFF	; 255
     dbc:	60 91 5a 01 	lds	r22, 0x015A
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     dc0:	cf db       	rcall	.-2146   	; 0x560 <CALLBACK_USB_GetDescriptor>
     dc2:	bc 01       	movw	r22, r24
     dc4:	89 2b       	or	r24, r25
     dc6:	09 f4       	brne	.+2      	; 0xdca <USB_Device_ProcessControlRequest+0x1e8>
     dc8:	3c c0       	rjmp	.+120    	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
     dca:	90 91 e8 00 	lds	r25, 0x00E8
     dce:	97 7f       	andi	r25, 0xF7	; 247
     dd0:	90 93 e8 00 	sts	0x00E8, r25
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	f3 dc       	rcall	.-1562   	; 0x7c0 <Endpoint_Write_Control_PStream_LE>
     dda:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     dde:	8b 77       	andi	r24, 0x7B	; 123
     de0:	80 93 e8 00 	sts	0x00E8, r24
     de4:	2e c0       	rjmp	.+92     	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     de6:	80 38       	cpi	r24, 0x80	; 128
     de8:	61 f5       	brne	.+88     	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
     dea:	80 91 e8 00 	lds	r24, 0x00E8
     dee:	87 7f       	andi	r24, 0xF7	; 247
     df0:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     df4:	80 91 51 01 	lds	r24, 0x0151
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     df8:	80 93 f1 00 	sts	0x00F1, r24
     dfc:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     e00:	8e 77       	andi	r24, 0x7E	; 126
     e02:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e06:	b2 dd       	rcall	.-1180   	; 0x96c <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e08:	1c c0       	rjmp	.+56     	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
     e0a:	81 11       	cpse	r24, r1
     e0c:	1a c0       	rjmp	.+52     	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
     e0e:	90 91 58 01 	lds	r25, 0x0158
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     e12:	92 30       	cpi	r25, 0x02	; 2
     e14:	b0 f4       	brcc	.+44     	; 0xe42 <USB_Device_ProcessControlRequest+0x260>
     e16:	80 91 e8 00 	lds	r24, 0x00E8
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     e1a:	87 7f       	andi	r24, 0xF7	; 247
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     e1c:	80 93 e8 00 	sts	0x00E8, r24
     e20:	90 93 51 01 	sts	0x0151, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e24:	a3 dd       	rcall	.-1210   	; 0x96c <Endpoint_ClearStatusStage>
     e26:	80 91 51 01 	lds	r24, 0x0151
     e2a:	81 11       	cpse	r24, r1
     e2c:	06 c0       	rjmp	.+12     	; 0xe3a <USB_Device_ProcessControlRequest+0x258>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     e2e:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     e32:	87 fd       	sbrc	r24, 7
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <USB_Device_ProcessControlRequest+0x258>

	if (USB_Device_ConfigurationNumber)
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	01 c0       	rjmp	.+2      	; 0xe3c <USB_Device_ProcessControlRequest+0x25a>
     e3a:	84 e0       	ldi	r24, 0x04	; 4
     e3c:	80 93 55 01 	sts	0x0155, r24
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e40:	cd da       	rcall	.-2662   	; 0x3dc <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     e42:	80 91 e8 00 	lds	r24, 0x00E8
     e46:	83 ff       	sbrs	r24, 3
     e48:	0a c0       	rjmp	.+20     	; 0xe5e <USB_Device_ProcessControlRequest+0x27c>
     e4a:	80 91 e8 00 	lds	r24, 0x00E8
     e4e:	87 7f       	andi	r24, 0xF7	; 247

	EVENT_USB_Device_ConfigurationChanged();
     e50:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e54:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     e58:	80 62       	ori	r24, 0x20	; 32
     e5a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e5e:	aa 96       	adiw	r28, 0x2a	; 42
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     e70:	08 95       	ret

00000e72 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     e72:	08 95       	ret

00000e74 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e74:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     e76:	80 91 55 01 	lds	r24, 0x0155
     e7a:	88 23       	and	r24, r24
     e7c:	99 f0       	breq	.+38     	; 0xea4 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e7e:	c0 91 e9 00 	lds	r28, 0x00E9
     e82:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e84:	90 91 ec 00 	lds	r25, 0x00EC
     e88:	89 2f       	mov	r24, r25
     e8a:	81 70       	andi	r24, 0x01	; 1
     e8c:	90 fd       	sbrc	r25, 0
     e8e:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e90:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e92:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e96:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     e9a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     e9c:	a2 de       	rcall	.-700    	; 0xbe2 <USB_Device_ProcessControlRequest>
     e9e:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ea0:	c0 93 e9 00 	sts	0x00E9, r28
     ea4:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     ea6:	08 95       	ret

00000ea8 <HID_Device_ProcessControlRequest>:
     ea8:	6f 92       	push	r6
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     eaa:	7f 92       	push	r7
     eac:	8f 92       	push	r8
     eae:	9f 92       	push	r9
     eb0:	af 92       	push	r10
     eb2:	bf 92       	push	r11
     eb4:	cf 92       	push	r12
     eb6:	df 92       	push	r13
     eb8:	ef 92       	push	r14
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <HID_Device_ProcessControlRequest+0x1e>
     ec6:	1f 92       	push	r1
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     ece:	cd b6       	in	r12, 0x3d	; 61
     ed0:	de b6       	in	r13, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ed2:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     ed6:	83 ff       	sbrs	r24, 3
     ed8:	04 c1       	rjmp	.+520    	; 0x10e2 <HID_Device_ProcessControlRequest+0x23a>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     eda:	f7 01       	movw	r30, r14
     edc:	80 81       	ld	r24, Z
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	20 91 5a 01 	lds	r18, 0x015A
     ee4:	30 91 5b 01 	lds	r19, 0x015B
     ee8:	28 17       	cp	r18, r24
     eea:	39 07       	cpc	r19, r25
     eec:	09 f0       	breq	.+2      	; 0xef0 <HID_Device_ProcessControlRequest+0x48>
     eee:	f9 c0       	rjmp	.+498    	; 0x10e2 <HID_Device_ProcessControlRequest+0x23a>
	  return;

	switch (USB_ControlRequest.bRequest)
     ef0:	80 91 57 01 	lds	r24, 0x0157
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	09 f4       	brne	.+2      	; 0xefa <HID_Device_ProcessControlRequest+0x52>
     ef8:	9b c0       	rjmp	.+310    	; 0x1030 <HID_Device_ProcessControlRequest+0x188>
     efa:	30 f4       	brcc	.+12     	; 0xf08 <HID_Device_ProcessControlRequest+0x60>
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	71 f0       	breq	.+28     	; 0xf1c <HID_Device_ProcessControlRequest+0x74>
     f00:	82 30       	cpi	r24, 0x02	; 2
     f02:	09 f4       	brne	.+2      	; 0xf06 <HID_Device_ProcessControlRequest+0x5e>
     f04:	d2 c0       	rjmp	.+420    	; 0x10aa <HID_Device_ProcessControlRequest+0x202>
     f06:	ed c0       	rjmp	.+474    	; 0x10e2 <HID_Device_ProcessControlRequest+0x23a>
     f08:	8a 30       	cpi	r24, 0x0A	; 10
     f0a:	09 f4       	brne	.+2      	; 0xf0e <HID_Device_ProcessControlRequest+0x66>
     f0c:	b6 c0       	rjmp	.+364    	; 0x107a <HID_Device_ProcessControlRequest+0x1d2>
     f0e:	8b 30       	cpi	r24, 0x0B	; 11
     f10:	09 f4       	brne	.+2      	; 0xf14 <HID_Device_ProcessControlRequest+0x6c>
     f12:	9f c0       	rjmp	.+318    	; 0x1052 <HID_Device_ProcessControlRequest+0x1aa>
     f14:	89 30       	cpi	r24, 0x09	; 9
     f16:	09 f0       	breq	.+2      	; 0xf1a <HID_Device_ProcessControlRequest+0x72>
     f18:	e4 c0       	rjmp	.+456    	; 0x10e2 <HID_Device_ProcessControlRequest+0x23a>
     f1a:	4d c0       	rjmp	.+154    	; 0xfb6 <HID_Device_ProcessControlRequest+0x10e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f1c:	80 91 56 01 	lds	r24, 0x0156
     f20:	81 3a       	cpi	r24, 0xA1	; 161
     f22:	09 f0       	breq	.+2      	; 0xf26 <HID_Device_ProcessControlRequest+0x7e>
     f24:	de c0       	rjmp	.+444    	; 0x10e2 <HID_Device_ProcessControlRequest+0x23a>
     f26:	8d b6       	in	r8, 0x3d	; 61
     f28:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     f2a:	1a 82       	std	Y+2, r1	; 0x02
     f2c:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     f2e:	80 91 58 01 	lds	r24, 0x0158
     f32:	10 91 59 01 	lds	r17, 0x0159
     f36:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     f38:	f7 01       	movw	r30, r14
     f3a:	80 85       	ldd	r24, Z+8	; 0x08
     f3c:	48 2f       	mov	r20, r24
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	8d b7       	in	r24, 0x3d	; 61
     f42:	9e b7       	in	r25, 0x3e	; 62
     f44:	84 1b       	sub	r24, r20
     f46:	95 0b       	sbc	r25, r21
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	9e bf       	out	0x3e, r25	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	8d bf       	out	0x3d, r24	; 61
     f52:	ed b7       	in	r30, 0x3d	; 61
     f54:	fe b7       	in	r31, 0x3e	; 62
     f56:	31 96       	adiw	r30, 0x01	; 1
     f58:	5f 01       	movw	r10, r30

				memset(ReportData, 0, sizeof(ReportData));
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	cf 01       	movw	r24, r30
     f60:	c8 d1       	rcall	.+912    	; 0x12f2 <memset>
     f62:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     f64:	41 0f       	add	r20, r17
     f66:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     f68:	0f 5f       	subi	r16, 0xFF	; 255
     f6a:	1f 4f       	sbci	r17, 0xFF	; 255
     f6c:	95 01       	movw	r18, r10
     f6e:	be 01       	movw	r22, r28
     f70:	6d 5f       	subi	r22, 0xFD	; 253
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	c7 01       	movw	r24, r14
     f76:	61 da       	rcall	.-2878   	; 0x43a <CALLBACK_HID_Device_CreateHIDReport>
     f78:	f7 01       	movw	r30, r14
     f7a:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     f7c:	97 81       	ldd	r25, Z+7	; 0x07
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	21 f0       	breq	.+8      	; 0xf8a <HID_Device_ProcessControlRequest+0xe2>
     f82:	40 85       	ldd	r20, Z+8	; 0x08
     f84:	50 e0       	ldi	r21, 0x00	; 0
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     f86:	b5 01       	movw	r22, r10
     f88:	ab d1       	rcall	.+854    	; 0x12e0 <memcpy>
     f8a:	10 92 e9 00 	sts	0x00E9, r1
     f8e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f92:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f94:	80 93 e8 00 	sts	0x00E8, r24
     f98:	69 81       	ldd	r22, Y+1	; 0x01
     f9a:	7a 81       	ldd	r23, Y+2	; 0x02
     f9c:	c5 01       	movw	r24, r10
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     f9e:	7a db       	rcall	.-2316   	; 0x694 <Endpoint_Write_Control_Stream_LE>
     fa0:	80 91 e8 00 	lds	r24, 0x00E8
     fa4:	8b 77       	andi	r24, 0x7B	; 123
     fa6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	9e be       	out	0x3e, r9	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	8d be       	out	0x3d, r8	; 61
     fb4:	96 c0       	rjmp	.+300    	; 0x10e2 <HID_Device_ProcessControlRequest+0x23a>
     fb6:	80 91 56 01 	lds	r24, 0x0156
     fba:	81 32       	cpi	r24, 0x21	; 33
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <HID_Device_ProcessControlRequest+0x118>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fbe:	91 c0       	rjmp	.+290    	; 0x10e2 <HID_Device_ProcessControlRequest+0x23a>
     fc0:	ad b6       	in	r10, 0x3d	; 61
     fc2:	be b6       	in	r11, 0x3e	; 62
     fc4:	00 91 5c 01 	lds	r16, 0x015C
     fc8:	10 91 5d 01 	lds	r17, 0x015D
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     fcc:	70 90 58 01 	lds	r7, 0x0158
     fd0:	60 90 59 01 	lds	r6, 0x0159
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     fd4:	8d b7       	in	r24, 0x3d	; 61
     fd6:	9e b7       	in	r25, 0x3e	; 62
     fd8:	80 1b       	sub	r24, r16
     fda:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	9e bf       	out	0x3e, r25	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	8d bf       	out	0x3d, r24	; 61
     fe6:	ed b7       	in	r30, 0x3d	; 61
     fe8:	fe b7       	in	r31, 0x3e	; 62
     fea:	31 96       	adiw	r30, 0x01	; 1
     fec:	4f 01       	movw	r8, r30
     fee:	80 91 e8 00 	lds	r24, 0x00E8
     ff2:	87 7f       	andi	r24, 0xF7	; 247
     ff4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ff8:	b8 01       	movw	r22, r16
     ffa:	cf 01       	movw	r24, r30
     ffc:	a5 db       	rcall	.-2230   	; 0x748 <Endpoint_Read_Control_Stream_LE>
     ffe:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1002:	8e 77       	andi	r24, 0x7E	; 126
    1004:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	71 10       	cpse	r7, r1
    100c:	01 c0       	rjmp	.+2      	; 0x1010 <HID_Device_ProcessControlRequest+0x168>
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1012:	02 1b       	sub	r16, r18
    1014:	13 0b       	sbc	r17, r19
    1016:	28 0d       	add	r18, r8
    1018:	39 1d       	adc	r19, r9
    101a:	4f ef       	ldi	r20, 0xFF	; 255
    101c:	46 0d       	add	r20, r6
    101e:	67 2d       	mov	r22, r7
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    1020:	c7 01       	movw	r24, r14
    1022:	93 da       	rcall	.-2778   	; 0x54a <CALLBACK_HID_Device_ProcessHIDReport>
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1028:	be be       	out	0x3e, r11	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	ad be       	out	0x3d, r10	; 61
    102e:	59 c0       	rjmp	.+178    	; 0x10e2 <HID_Device_ProcessControlRequest+0x23a>
    1030:	80 91 56 01 	lds	r24, 0x0156
    1034:	81 3a       	cpi	r24, 0xA1	; 161
    1036:	09 f0       	breq	.+2      	; 0x103a <HID_Device_ProcessControlRequest+0x192>
    1038:	54 c0       	rjmp	.+168    	; 0x10e2 <HID_Device_ProcessControlRequest+0x23a>
    103a:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    103e:	87 7f       	andi	r24, 0xF7	; 247
    1040:	80 93 e8 00 	sts	0x00E8, r24
    1044:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1048:	80 ff       	sbrs	r24, 0
    104a:	fc cf       	rjmp	.-8      	; 0x1044 <HID_Device_ProcessControlRequest+0x19c>
    104c:	f7 01       	movw	r30, r14
    104e:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1050:	40 c0       	rjmp	.+128    	; 0x10d2 <HID_Device_ProcessControlRequest+0x22a>
    1052:	80 91 56 01 	lds	r24, 0x0156
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1056:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1058:	09 f0       	breq	.+2      	; 0x105c <HID_Device_ProcessControlRequest+0x1b4>
    105a:	43 c0       	rjmp	.+134    	; 0x10e2 <HID_Device_ProcessControlRequest+0x23a>
    105c:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1060:	87 7f       	andi	r24, 0xF7	; 247
    1062:	80 93 e8 00 	sts	0x00E8, r24
    1066:	82 dc       	rcall	.-1788   	; 0x96c <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1068:	90 91 58 01 	lds	r25, 0x0158
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	91 11       	cpse	r25, r1
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <HID_Device_ProcessControlRequest+0x1cc>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1076:	81 87       	std	Z+9, r24	; 0x09
    1078:	34 c0       	rjmp	.+104    	; 0x10e2 <HID_Device_ProcessControlRequest+0x23a>
    107a:	80 91 56 01 	lds	r24, 0x0156
    107e:	81 32       	cpi	r24, 0x21	; 33
    1080:	81 f5       	brne	.+96     	; 0x10e2 <HID_Device_ProcessControlRequest+0x23a>
    1082:	80 91 e8 00 	lds	r24, 0x00E8
    1086:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1088:	80 93 e8 00 	sts	0x00E8, r24
    108c:	6f dc       	rcall	.-1826   	; 0x96c <Endpoint_ClearStatusStage>
    108e:	80 91 58 01 	lds	r24, 0x0158
    1092:	90 91 59 01 	lds	r25, 0x0159
    1096:	88 27       	eor	r24, r24
    1098:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    109a:	96 95       	lsr	r25
    109c:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    109e:	3a 95       	dec	r19
    10a0:	e1 f7       	brne	.-8      	; 0x109a <HID_Device_ProcessControlRequest+0x1f2>
    10a2:	f7 01       	movw	r30, r14
    10a4:	95 87       	std	Z+13, r25	; 0x0d
    10a6:	84 87       	std	Z+12, r24	; 0x0c
    10a8:	1c c0       	rjmp	.+56     	; 0x10e2 <HID_Device_ProcessControlRequest+0x23a>
    10aa:	80 91 56 01 	lds	r24, 0x0156
    10ae:	81 3a       	cpi	r24, 0xA1	; 161
    10b0:	c1 f4       	brne	.+48     	; 0x10e2 <HID_Device_ProcessControlRequest+0x23a>
    10b2:	80 91 e8 00 	lds	r24, 0x00E8
    10b6:	87 7f       	andi	r24, 0xF7	; 247
    10b8:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    10bc:	80 91 e8 00 	lds	r24, 0x00E8
    10c0:	80 ff       	sbrs	r24, 0
    10c2:	fc cf       	rjmp	.-8      	; 0x10bc <HID_Device_ProcessControlRequest+0x214>
    10c4:	f7 01       	movw	r30, r14
    10c6:	84 85       	ldd	r24, Z+12	; 0x0c
    10c8:	95 85       	ldd	r25, Z+13	; 0x0d
    10ca:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10cc:	87 95       	ror	r24
    10ce:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    10d0:	87 95       	ror	r24
    10d2:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    10d6:	80 91 e8 00 	lds	r24, 0x00E8
    10da:	8e 77       	andi	r24, 0x7E	; 126
    10dc:	80 93 e8 00 	sts	0x00E8, r24
    10e0:	45 dc       	rcall	.-1910   	; 0x96c <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10e6:	de be       	out	0x3e, r13	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd be       	out	0x3d, r12	; 61
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    10f0:	0f 90       	pop	r0
    10f2:	df 91       	pop	r29
			}

			break;
	}
}
    10f4:	cf 91       	pop	r28
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	df 90       	pop	r13
    1100:	cf 90       	pop	r12
    1102:	bf 90       	pop	r11
    1104:	af 90       	pop	r10
    1106:	9f 90       	pop	r9
    1108:	8f 90       	pop	r8
    110a:	7f 90       	pop	r7
    110c:	6f 90       	pop	r6
    110e:	08 95       	ret

00001110 <HID_Device_ConfigureEndpoints>:
    1110:	fc 01       	movw	r30, r24
    1112:	39 96       	adiw	r30, 0x09	; 9
    1114:	27 e0       	ldi	r18, 0x07	; 7
    1116:	df 01       	movw	r26, r30
    1118:	1d 92       	st	X+, r1
    111a:	2a 95       	dec	r18
    111c:	e9 f7       	brne	.-6      	; 0x1118 <HID_Device_ConfigureEndpoints+0x8>
    111e:	21 e0       	ldi	r18, 0x01	; 1
    1120:	fc 01       	movw	r30, r24

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1122:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1124:	24 ef       	ldi	r18, 0xF4	; 244
    1126:	31 e0       	ldi	r19, 0x01	; 1
    1128:	35 87       	std	Z+13, r19	; 0x0d
    112a:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    112c:	23 e0       	ldi	r18, 0x03	; 3
    112e:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1130:	61 e0       	ldi	r22, 0x01	; 1
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	d2 cb       	rjmp	.-2140   	; 0x8da <Endpoint_ConfigureEndpointTable>

00001136 <HID_Device_USBTask>:
    1136:	4f 92       	push	r4
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1138:	5f 92       	push	r5
    113a:	6f 92       	push	r6
    113c:	7f 92       	push	r7
    113e:	8f 92       	push	r8
    1140:	9f 92       	push	r9
    1142:	af 92       	push	r10
    1144:	bf 92       	push	r11
    1146:	cf 92       	push	r12
    1148:	df 92       	push	r13
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	00 d0       	rcall	.+0      	; 0x1158 <HID_Device_USBTask+0x22>
    1158:	1f 92       	push	r1
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1160:	ad b6       	in	r10, 0x3d	; 61
    1162:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1164:	80 91 55 01 	lds	r24, 0x0155
    1168:	84 30       	cpi	r24, 0x04	; 4
    116a:	09 f0       	breq	.+2      	; 0x116e <HID_Device_USBTask+0x38>
    116c:	8d c0       	rjmp	.+282    	; 0x1288 <HID_Device_USBTask+0x152>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    116e:	80 91 e4 00 	lds	r24, 0x00E4
    1172:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1176:	f7 01       	movw	r30, r14
    1178:	22 85       	ldd	r18, Z+10	; 0x0a
    117a:	33 85       	ldd	r19, Z+11	; 0x0b
    117c:	28 17       	cp	r18, r24
    117e:	39 07       	cpc	r19, r25
    1180:	09 f4       	brne	.+2      	; 0x1184 <HID_Device_USBTask+0x4e>
    1182:	82 c0       	rjmp	.+260    	; 0x1288 <HID_Device_USBTask+0x152>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1184:	81 81       	ldd	r24, Z+1	; 0x01
    1186:	8f 70       	andi	r24, 0x0F	; 15
    1188:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    118c:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1190:	85 ff       	sbrs	r24, 5
    1192:	7a c0       	rjmp	.+244    	; 0x1288 <HID_Device_USBTask+0x152>
    1194:	8d b6       	in	r8, 0x3d	; 61
    1196:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1198:	40 85       	ldd	r20, Z+8	; 0x08
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	8d b7       	in	r24, 0x3d	; 61
    119e:	9e b7       	in	r25, 0x3e	; 62
    11a0:	84 1b       	sub	r24, r20
    11a2:	95 0b       	sbc	r25, r21
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	9e bf       	out	0x3e, r25	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	8d bf       	out	0x3d, r24	; 61
    11ae:	ed b7       	in	r30, 0x3d	; 61
    11b0:	fe b7       	in	r31, 0x3e	; 62
    11b2:	31 96       	adiw	r30, 0x01	; 1
    11b4:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    11b6:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    11b8:	1a 82       	std	Y+2, r1	; 0x02
    11ba:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	cf 01       	movw	r24, r30
    11c2:	97 d0       	rcall	.+302    	; 0x12f2 <memset>
    11c4:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    11c6:	0f 5f       	subi	r16, 0xFF	; 255
    11c8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ca:	96 01       	movw	r18, r12
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	be 01       	movw	r22, r28
    11d0:	6d 5f       	subi	r22, 0xFD	; 253
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	c7 01       	movw	r24, r14
    11d6:	31 d9       	rcall	.-3486   	; 0x43a <CALLBACK_HID_Device_CreateHIDReport>
    11d8:	48 2e       	mov	r4, r24
    11da:	f7 01       	movw	r30, r14
    11dc:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    11de:	95 85       	ldd	r25, Z+13	; 0x0d
    11e0:	89 2b       	or	r24, r25
    11e2:	51 f0       	breq	.+20     	; 0x11f8 <HID_Device_USBTask+0xc2>
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	26 85       	ldd	r18, Z+14	; 0x0e
    11ea:	37 85       	ldd	r19, Z+15	; 0x0f
    11ec:	23 2b       	or	r18, r19
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <HID_Device_USBTask+0xbc>
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	09 2f       	mov	r16, r25
    11f4:	18 2f       	mov	r17, r24
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <HID_Device_USBTask+0xc6>
    11f8:	00 e0       	ldi	r16, 0x00	; 0
    11fa:	10 e0       	ldi	r17, 0x00	; 0
    11fc:	f7 01       	movw	r30, r14
    11fe:	66 80       	ldd	r6, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1200:	77 80       	ldd	r7, Z+7	; 0x07
    1202:	61 14       	cp	r6, r1
    1204:	71 04       	cpc	r7, r1
    1206:	89 f0       	breq	.+34     	; 0x122a <HID_Device_USBTask+0xf4>
    1208:	49 81       	ldd	r20, Y+1	; 0x01
    120a:	5a 81       	ldd	r21, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    120c:	b3 01       	movw	r22, r6
    120e:	c6 01       	movw	r24, r12
    1210:	5a d0       	rcall	.+180    	; 0x12c6 <memcmp>
    1212:	55 24       	eor	r5, r5
    1214:	53 94       	inc	r5
    1216:	89 2b       	or	r24, r25
    1218:	09 f4       	brne	.+2      	; 0x121c <HID_Device_USBTask+0xe6>
    121a:	51 2c       	mov	r5, r1
    121c:	f7 01       	movw	r30, r14
    121e:	40 85       	ldd	r20, Z+8	; 0x08
    1220:	50 e0       	ldi	r21, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1222:	b6 01       	movw	r22, r12
    1224:	c3 01       	movw	r24, r6
    1226:	5c d0       	rcall	.+184    	; 0x12e0 <memcpy>
    1228:	01 c0       	rjmp	.+2      	; 0x122c <HID_Device_USBTask+0xf6>
    122a:	51 2c       	mov	r5, r1
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	9a 81       	ldd	r25, Y+2	; 0x02
    1230:	89 2b       	or	r24, r25

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1232:	f1 f0       	breq	.+60     	; 0x1270 <HID_Device_USBTask+0x13a>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1234:	41 10       	cpse	r4, r1
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <HID_Device_USBTask+0x10a>
    1238:	51 10       	cpse	r5, r1
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <HID_Device_USBTask+0x10a>
    123c:	01 2b       	or	r16, r17
    123e:	c1 f0       	breq	.+48     	; 0x1270 <HID_Device_USBTask+0x13a>
    1240:	f7 01       	movw	r30, r14
    1242:	84 85       	ldd	r24, Z+12	; 0x0c
    1244:	95 85       	ldd	r25, Z+13	; 0x0d
    1246:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1248:	86 87       	std	Z+14, r24	; 0x0e
    124a:	81 81       	ldd	r24, Z+1	; 0x01
    124c:	8f 70       	andi	r24, 0x0F	; 15
    124e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	81 11       	cpse	r24, r1
    1256:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    125a:	69 81       	ldd	r22, Y+1	; 0x01
    125c:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	50 e0       	ldi	r21, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1262:	c6 01       	movw	r24, r12
    1264:	cd d9       	rcall	.-3174   	; 0x600 <Endpoint_Write_Stream_LE>
    1266:	80 91 e8 00 	lds	r24, 0x00E8
    126a:	8e 77       	andi	r24, 0x7E	; 126
    126c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1270:	80 91 e4 00 	lds	r24, 0x00E4
    1274:	90 91 e5 00 	lds	r25, 0x00E5
    1278:	f7 01       	movw	r30, r14
    127a:	93 87       	std	Z+11, r25	; 0x0b
    127c:	82 87       	std	Z+10, r24	; 0x0a
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1282:	9e be       	out	0x3e, r9	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	8d be       	out	0x3d, r8	; 61
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	be be       	out	0x3e, r11	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	ad be       	out	0x3d, r10	; 61
	}
}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	df 90       	pop	r13
    12a6:	cf 90       	pop	r12
    12a8:	bf 90       	pop	r11
    12aa:	af 90       	pop	r10
    12ac:	9f 90       	pop	r9
    12ae:	8f 90       	pop	r8
    12b0:	7f 90       	pop	r7
    12b2:	6f 90       	pop	r6
    12b4:	5f 90       	pop	r5
    12b6:	4f 90       	pop	r4
    12b8:	08 95       	ret

000012ba <__tablejump2__>:
    12ba:	ee 0f       	add	r30, r30
    12bc:	ff 1f       	adc	r31, r31
    12be:	05 90       	lpm	r0, Z+
    12c0:	f4 91       	lpm	r31, Z
    12c2:	e0 2d       	mov	r30, r0
    12c4:	09 94       	ijmp

000012c6 <memcmp>:
    12c6:	fb 01       	movw	r30, r22
    12c8:	dc 01       	movw	r26, r24
    12ca:	04 c0       	rjmp	.+8      	; 0x12d4 <memcmp+0xe>
    12cc:	8d 91       	ld	r24, X+
    12ce:	01 90       	ld	r0, Z+
    12d0:	80 19       	sub	r24, r0
    12d2:	21 f4       	brne	.+8      	; 0x12dc <memcmp+0x16>
    12d4:	41 50       	subi	r20, 0x01	; 1
    12d6:	50 40       	sbci	r21, 0x00	; 0
    12d8:	c8 f7       	brcc	.-14     	; 0x12cc <memcmp+0x6>
    12da:	88 1b       	sub	r24, r24
    12dc:	99 0b       	sbc	r25, r25
    12de:	08 95       	ret

000012e0 <memcpy>:
    12e0:	fb 01       	movw	r30, r22
    12e2:	dc 01       	movw	r26, r24
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <memcpy+0xa>
    12e6:	01 90       	ld	r0, Z+
    12e8:	0d 92       	st	X+, r0
    12ea:	41 50       	subi	r20, 0x01	; 1
    12ec:	50 40       	sbci	r21, 0x00	; 0
    12ee:	d8 f7       	brcc	.-10     	; 0x12e6 <memcpy+0x6>
    12f0:	08 95       	ret

000012f2 <memset>:
    12f2:	dc 01       	movw	r26, r24
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <memset+0x6>
    12f6:	6d 93       	st	X+, r22
    12f8:	41 50       	subi	r20, 0x01	; 1
    12fa:	50 40       	sbci	r21, 0x00	; 0
    12fc:	e0 f7       	brcc	.-8      	; 0x12f6 <memset+0x4>
    12fe:	08 95       	ret

00001300 <_exit>:
    1300:	f8 94       	cli

00001302 <__stop_program>:
    1302:	ff cf       	rjmp	.-2      	; 0x1302 <__stop_program>
